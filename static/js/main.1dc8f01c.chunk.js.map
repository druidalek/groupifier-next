{"version":3,"sources":["logic/utils.js","logic/wcif-extensions.js","logic/events.js","logic/activities.js","logic/formulas.js","components/Competition/CompetitionMenu/CompetitionMenu.js","components/common/RoomName/RoomName.js","components/common/PositiveIntegerInput/PositiveIntegerInput.js","components/common/ZeroablePositiveIntegerInput/ZeroablePositiveIntegerInput.js","components/Competition/ConfigManager/RoomConfig/RoomConfig.js","components/Competition/ConfigManager/RoomsConfig/RoomsConfig.js","components/common/CubingIcon/CubingIcon.js","components/common/EventSelect/EventSelect.js","components/common/RoundsNavigation/RoundPanel/RoundPanel.js","components/common/RoundsNavigation/RoundsNavigation.js","components/Competition/ConfigManager/RoundActivityConfig/RoundActivityConfig.js","components/Competition/ConfigManager/RoundConfig/RoundConfig.js","components/Competition/ConfigManager/RoundsConfig/RoundsConfig.js","logic/wca-env.js","logic/auth.js","logic/wca-api.js","components/common/SaveWcifButton/SaveWcifButton.js","logic/competitors.js","components/Competition/ConfigManager/ConfigManager.js","components/Competition/GroupsManager/GroupDialog/GroupDialog.js","components/Competition/GroupsManager/GroupsNavigation/GroupsNavigation.js","logic/groups.js","components/Competition/GroupsManager/GroupsManager.js","logic/formatters.js","logic/pdfmake.js","logic/pdf-utils.js","logic/scorecards.js","components/Competition/PrintingManager/Scorecards/Scorecards.js","logic/competitor-cards.js","components/Competition/PrintingManager/CompetitorCards/CompetitorCards.js","components/Competition/PrintingManager/PrintingManager.js","components/Competition/RolesManager/RolesManager.js","components/Competition/Competition.js","components/CompetitionList/CompetitionList.js","components/Footer/Footer.js","components/Header/Header.js","components/Home/Home.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["updateIn","object","_ref","updater","_ref2","Object","toArray","property","properyChain","slice","length","objectSpread","defineProperty","setIn","value","mapIn","mapper","array","map","isPresentDeep","obj","values","every","pluralize","count","singular","plural","concat","scaleToOne","arr","arrSum","sum","x","flatMap","fn","reduce","xs","zip","_len","arguments","arrs","Array","_key","_","i","intersection","ys","filter","includes","difference","partition","sortCompare","y","sortBy","sort","sortByArray","Map","get","_ref5","_ref6","slicedToArray","a","b","result","chunk","size","toConsumableArray","inRange","addMilliseconds","isoString","milliseconds","Date","getTime","toISOString","shortTime","timeZone","undefined","toLocaleTimeString","hour","minute","groupifierExtensionId","extensionName","buildGroupifierExtension","data","id","specUrl","process","extensions","wcifEntity","setExtensionData","otherExtensions","extension","getExtensionData","find","removeExtensionData","events","name","shortName","eventNameById","eventId","propertyById","event","parseActivityCode","activityCode","_activityCode$match","match","_activityCode$match2","e","r","g","roundNumber","parseInt","groupNumber","attemptNumber","activityCodeToName","_parseActivityCode","join","shouldHaveGroups","activity","_parseActivityCode2","activityDuration","endTime","startTime","activityStations","wcif","room","rooms","activities","stations","populateActivitiesConfig","expectedCompetitorsByRound","defaults","rounds","round","expectedRoundCompetitors","roundActivities","capacities","capacity","competitors","Math","groups","preferredGroupSize","calculatedGroupCount","max","suggestedGroupCount","scramblers","assignScramblers","groupCompetitors","floor","min","suggestedScramblerCount","runners","assignRunners","suggestedRunnerCount","assignJudges","console","log","updateActivity","updatedActivity","venue","anyActivityConfigured","some","activitiesConfigComplete","roomsConfigComplete","activitiesOverlap","first","second","allActivities","allChildActivities","_ref3","childActivities","activitiesByIdCachedBySchedule","activityById","activityId","has","schedule","activitiesById","set","hasDistributedAttempts","roundId","_ref4","startsWith","roundGroupActivities","activityAssigned","persons","person","assignments","assignment","groupActivitiesAssigned","roundsWithoutResults","results","roundsMissingAssignments","roundsMissingScorecards","anyCompetitorAssignment","assignmentCode","anyGroupAssignedOrCreated","anyResults","venues","menuItems","path","text","icon","enabled","CompetitionMenu","baseUrl","react_default","createElement","Paper_default","List_default","menuItem","ListItem_default","key","button","component","Link","to","disabled","ListItemIcon_default","Icon_default","ListItemText_default","primary","RoomName","Typography_default","variant","style","display","width","height","marginRight","borderRadius","backgroundColor","color","PositiveIntegerInput","handleKeyPress","preventDefault","handleTextFieldChange","newValue","target","Number","isNaN","_this","props","onChange","_this$props","this","objectWithoutProperties","TextField_default","assign","type","onKeyPress","PureComponent","ZeroablePositiveIntegerInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleCheckboxChange","checked","inputRef","React","createRef","prevProps","current","focus","react","PositiveIntegerInput_PositiveIntegerInput","Checkbox_default","RoomConfig","handleInputChange","roomData","_this$props2","common_RoomName_RoomName","ZeroablePositiveIntegerInput_ZeroablePositiveIntegerInput","label","Component","RoomsConfig","handleRoomChange","updatedRoom","onWcifChange","_this2","padding","Grid_default","container","spacing","item","lg","RoomConfig_RoomConfig","CubingIcon","fontSize","className","EventSelect","selected","Tooltip_default","title","placement","IconButton_default","onClick","common_CubingIcon_CubingIcon","opacity","RoundWithGroups","handlePanelChange","expanded","scrollToElement","node","window","scrollTo","top","parentNode","getBoundingClientRect","behavior","render","ExpansionPanel_default","CollapseProps","onEntered","ExpansionPanelSummary_default","expandIcon","ExpansionPanelDetails_default","RoundsNavigation","handleEventChange","setState","selectedEventId","handleRoundChange","expandedRoundId","state","_this$state","selectedEvent","justify","EventSelect_EventSelect","RoundPanel_RoundWithGroups","RoundActivityConfig","handlePropertyChange","_event$target","nextProps","expectedCompetitors","_getExtensionData","groupSize","groupsHelperText","scramblersHelperText","runnersHelperText","groupsCreated","groupsAssigned","direction","helperText","margin","FormControlLabel_default","control","RoundConfig","handleActivityChange","activitiesWithRooms","RoundActivityConfig_RoundActivityConfig","RoundsConfig","handleNextClick","renderRound","RoundConfig_RoundConfig","RoundsNavigation_RoundsNavigation","roleLabel","Button_default","production","URLSearchParams","location","search","WCA_ORIGIN","WCA_OAUTH_CLIENT_ID","wcaAccessToken","localStorage","getItem","signIn","redirectUri","href","split","params","client_id","response_type","redirect_uri","scope","signOut","removeItem","isSignedIn","saveWcifChanges","updatedWcif","Promise","all","patchWcifAttribute","attribute","wcaApiFetch","method","body","JSON","stringify","fetchOptions","baseApiUrl","fetch","headers","Headers","Authorization","Content-Type","then","response","json","SaveWcifButton","saving","failed","handleSaveClick","onWcifUpdate","history","push","catch","handleSnackbarClose","Snackbar_default","open","message","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","visibility","CircularProgress_default","position","best","Error","personalBest","personalBests","pb","Infinity","bestAverageAndSingle","competitor","getExpectedCompetitorsByRound","_event$rounds","firstRound","nextRounds","registeredCompetitors","registration","eventIds","nextRound","advancementCondition","nextRoundCompetitors","sortedCompetitors","level","competitorsExpectedToAdvance","advancingResults","sortedResults","attempts","ranking","maxAdvanceable","firstNonAdvancingRank","rank","resultCount","attempt","satisfiesAdvancementCondition","competitorsForRound","status","previousRound","registrantId","personId","age","diffMs","now","birthdate","staffAssignments","staffAssignmentsForEvent","acceptedPeople","ConfigManager","handleWcifChange","localWcif","handleTabChange","tabValue","clearConfig","wcifConfigComplete","AppBar_default","Tabs_default","centered","Tab_default","RoomsConfig_RoomsConfig","RoundsConfig_RoundsConfig","SaveWcifButton_SaveWcifButton","GroupDialog","groupActivity","rolesWithPeople","role","Dialog_default","maxWidth","DialogTitle_default","DialogContent_default","people","sm","md","dense","overflowY","maxHeight","wcaUserId","DialogActions_default","openedGroupActivity","handleGroupClick","handleDialogClose","roomsWithTimezoneAndGroups","timezone","groupActivities","secondary","Fragment","GroupDialog_GroupDialog","createGroupActivities","currentActivityId","apply","maxActivityId","activitiesWithGroups","groupDuration","from","index","scrambleSetId","forEach","assignTasks","roundsToAssign","assignGroups","assignScrambling","assignRunning","assignJudging","assignmentFn","updatedCompetitors","assignActivity","updatePeople","groupActivitiesWithCapacity","_zip","_zip2","groupSizes","calculateGroupSizes","initialGroups","sortedInitialGroups","availabilityRates","group","availabilityRate","maxAvailabilityRate","mostAvailableGroups","preferredGroups","overlapsEveryoneWithSameRole","potentialGroups","notFullGroup","addCompetitorToGroupEnd","updatedGroups","moveSomeoneRight","moveSomeoneLeft","_ref7","competitorCount","_ref8","groupId","_ref9","indexOf","furtherGroup","predicate","competitorToMove","reduceRight","found","moveCompetitorToGroupStart","groupsWithSpot","_ref10","previousGroup","moveCompetitorToGroupEnd","updateCompetitorsInGroup","removeCompetitorFromGroup","other","fromGroupId","toGroupId","addCompetitorToGroupStart","staffScramblers","roles","available","availableDuring","sortedAvailableStaff","sortedAvailableCompetitors","competesIn15Minutes","potentialScramblers","_partition","_partition2","staffRunners","sortedAvailablePeople","potentialRunners","updatedPeople","_partition3","_partition4","staffJudges","potentialJudges","competingStartTimes","_ref11","_ref12","competingStart","updatedPerson","_ref13","intersections","_ref14","_sort","_sort2","middleStart","middleEnd","activitiesIntersection","others","_ref15","updateScrambleSetCount","scrambleSetCountForRound","_ref16","Set","GroupsManager","start","performance","wcifWithAssignments","clearGroups","allGroupsCreated","SnackbarContent_default","action","GroupsNavigation_RoundWithGroups","cutoffToString","cutoff","multibldAttemptResultToPoints","attemptResult","centisecondsToClockFormat","timeLimitToString","timeLimit","centiseconds","cumulativeRoundIds","clockFormat","roundStrings","shortEventNameById","date","setUTCMilliseconds","substr","replace","vfsFonts","pdfMake","vfs","singleFileFont","file","normal","bold","italic","bolditalics","fonts","Roboto","italics","WenQuanYiZenHei","NotoSansThai","NotoSansArabic","NotoSansGeorgian","NotoSansArmenian","determineFont","code","charCodeAt","pdfName","swapLatinWithLocalNames","latinName","localName","pdfNames","font","reverse","maxAttemptCountByFormat","1","2","3","m","downloadScorecards","pdfDefinition","scorecardsPdfDefinition","start2","createPdf","download","background","canvas","cutLine","x1","y1","pageHeight","x2","pageWidth","y2","pageMargins","content","layout","paddingLeft","paddingRight","paddingTop","paddingBottom","hLineWidth","vLineWidth","table","widths","heights","dontBreakRows","scorecards","properties","lineWidth","dash","lineColor","sortedGroupActivities","scorecardNumber","groupScorecards","scorecard","competitionName","scorecardsOnLastPage","attemptCount","format","alignment","columnLabels","attemptRows","noBorder","colSpan","attemptRow","columns","labels","attemptIndex","rows","attemptsSeparator","numberOfAttempts","cutoffLine","border","Scorecards","handleDownloadClick","selectedRounds","handleRoundClick","tabIndex","disableRipple","downloadCompetitorCards","competitorCardsPdfDefinition","competitorCards","cards","unbreakable","competitorCard","cardsInLastRow","wcifEvents","tasks","task","assignmentCodes","stack","wcaId","header","wcifEvent","findIndex","groupsText","CompetitorCards","PrintingManager","Scorecards_Scorecards","CompetitorCards_CompetitorCards","RolesManager","handleSearchChange","searchString","handleChangePage","page","clearRoles","roleIds","roleId","personWcaUserId","RegExp","Toolbar_default","overflowX","Table_default","TableHead_default","TableRow_default","TableCell_default","textAlign","TableBody_default","hover","handleRoleChange","bind","TablePagination_default","rowsPerPage","rowsPerPageOptions","onChangePage","Competition","loading","handleWcifUpdate","competitionId","_this3","LinearProgress_default","marginBottom","Switch","Route","exact","url","Competition_CompetitionMenu_CompetitionMenu","RolesManager_RolesManager","ConfigManager_ConfigManager","GroupsManager_GroupsManager","PrintingManager_PrintingManager","CompetitionList","competitions","oneWeekAgo","managed_by_me","getUpcomingManageableCompetitions","competition","subheader","ListSubheader_default","Footer","flexGrow","rel","marginLeft","Header","onSignIn","onSignOut","verticalAlign","features","Home","feature","App","handleSignIn","handleSignOut","HashRouter","CssBaseline_default","components_Header_Header","Redirect","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","error","hash","hashParams","setItem","expiresInSeconds","expirationTime","initializeAuth","ReactDOM","App_App","document","getElementById","URL","origin","addEventListener","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1dc8f01c.chunk.js","sourcesContent":["/**\n * Returns a copy of the object with the value at the specified path transformed by the update function.\n *\n * @param {Object} object\n * @param {Array} propertyChain\n * @param {Function} updater\n * @returns {Object}\n */\nexport const updateIn = (object, [property, ...properyChain], updater) =>\n  properyChain.length === 0\n    ? { ...object, [property]: updater(object[property]) }\n    : { ...object, [property]: updateIn(object[property], properyChain, updater) };\n\n/**\n * Returns a copy of the object with the value at the specified path set to the given one.\n *\n * @param {Object} object\n * @param {Array} propertyChain\n * @param {*} value\n * @returns {Object}\n */\nexport const setIn = (object, properyChain, value) =>\n  updateIn(object, properyChain, () => value);\n\n/**\n * Returns a copy of the object with the value at the specified path merged with the given one.\n *\n * @param {Object} object\n * @param {Array} propertyChain\n * @param {Object} newValue\n * @returns {Object}\n */\nexport const mergeIn = (object, properyChain, newValue) =>\n  updateIn(object, properyChain, currentValue => ({ ...currentValue, ...newValue }));\n\n/**\n * Returns a copy of the object with the array at the specified path mapped with the given function.\n *\n * @param {Object} object\n * @param {Array} propertyChain\n * @param {Object} mapper\n * @returns {Object}\n */\nexport const mapIn = (object, properyChain, mapper) =>\n  updateIn(object, properyChain, array => array && array.map(mapper));\n\n/**\n * Returns object's value at the specified path or the default value if it doesn't exist.\n *\n * @param {Object} object\n * @param {Array} propertyChain\n * @param {*} defaultValue\n * @returns {*}\n */\nexport const getIn = (object, [property, ...propertyChain], defaultValue = null) =>\n  object ? (\n    propertyChain.length === 0\n      ? (object.hasOwnProperty(property) ? object[property] : defaultValue)\n      : getIn(object[property], propertyChain, defaultValue)\n  ) : defaultValue;\n\n/**\n * Checks if the given value is an object.\n *\n * @param {*} value\n * @returns {boolean}\n */\nconst isObject = obj => obj === Object(obj);\n\n/**\n * When given an object, deeply checks if it doesn't contain null values.\n * Otherwise, checks if the given value is not null.\n *\n * @param {*} value\n * @returns {boolean}\n */\nexport const isPresentDeep = value =>\n  isObject(value)\n    ? Object.values(value).every(isPresentDeep)\n    : value != null;\n\n/**\n * Pluralizes a word according to the given number.\n * When no plural form given, uses singular form with an 's' appended.\n *\n * @param {number} count\n * @param {string} singular\n * @param {string} plural\n * @returns {string}\n */\nexport const pluralize = (count, singular, plural) =>\n  `${count} ${count === 1 ? singular : (plural || singular + 's')}`\n\n/**\n * Returns a new array with items summing up to 1, preserving elements proportionality.\n * When the given array is empty, returns an empty array.\n *\n * @param {Array} arr\n * @returns {Array}\n */\nexport const scaleToOne = arr => {\n  if (arr.length === 0) return [];\n  const arrSum = sum(arr);\n  return arr.map(x => arrSum !== 0 ? x / arrSum : 1 / arr.length);\n};\n\n/**\n * Applies the given function to the elements and returns the first truthy value of these calls.\n *\n * @param {Array} arr\n * @returns {*}\n */\nexport const firstResult = (arr, fn) =>\n  arr.reduce((result, x) => result || fn(x), null);\n\nexport const flatMap = (arr, fn) =>\n  arr.reduce((xs, x) => xs.concat(fn(x)), []);\n\nexport const zip = (...arrs) =>\n  arrs[0].map((_, i) => arrs.map(arr => arr[i]));\n\nexport const findLast = (arr, predicate) =>\n  arr.reduceRight((found, x) =>\n    found !== undefined ? found : (predicate(x) ? x : undefined)\n  , undefined);\n\nexport const intersection = (xs, ys) =>\n  xs.filter(x => ys.includes(x));\n\nexport const difference = (xs, ys) =>\n  xs.filter(x => !ys.includes(x));\n\nexport const partition = (xs, fn) =>\n  [xs.filter(fn), xs.filter(x => !fn(x))];\n\nconst sortCompare = (x, y) =>\n  x < y ? -1 : (x > y ? 1 : 0);\n\nexport const sortBy = (arr, fn) =>\n  arr.slice().sort((x, y) => sortCompare(fn(x), fn(y)));\n\nexport const sortByArray = (arr, fn) => {\n  const values = new Map(arr.map(x => [x, fn(x)])); /* Compute every value once. */\n  return arr.slice().sort((x, y) =>\n    firstResult(zip(values.get(x), values.get(y)), ([a, b]) => sortCompare(a, b))\n  );\n}\n\nexport const chunk = (arr, size) =>\n  arr.length <= size\n    ? [arr]\n    : [arr.slice(0, size), ...chunk(arr.slice(size), size)];\n\nexport const uniq = arr =>\n  [...new Set(arr)];\n\nexport const sum = arr =>\n  arr.reduce((x, y) => x + y, 0);\n\nexport const inRange = (x, a, b) =>\n  a <= x && x <= b;\n\nexport const addMilliseconds = (isoString, milliseconds) =>\n  new Date(new Date(isoString).getTime() + milliseconds).toISOString();\n\nexport const shortTime = (isoString, timeZone = 'UTC') =>\n  new Date(isoString).toLocaleTimeString('en-US', { timeZone, hour: 'numeric', minute: 'numeric' });\n","const groupifierExtensionId = extensionName => `groupifier.${extensionName}`;\n\nconst buildGroupifierExtension = (extensionName, data) => ({\n  id: groupifierExtensionId(extensionName),\n  specUrl: `${process.env.PUBLIC_URL}/wcif-extensions/${extensionName}.json`,\n  data\n});\n\nconst extensions = wcifEntity => wcifEntity.extensions || [];\n\nexport const setExtensionData = (extensionName, wcifEntity, data) => {\n  const otherExtensions = extensions(wcifEntity)\n    .filter(extension => extension.id !== groupifierExtensionId(extensionName));\n  return {\n    ...wcifEntity,\n    extensions: [...otherExtensions, buildGroupifierExtension(extensionName, data)]\n  };\n};\n\nexport const getExtensionData = (extensionName, wcifEntity) => {\n  const extension = extensions(wcifEntity)\n    .find(extension => extension.id === groupifierExtensionId(extensionName));\n  return extension ? extension.data : null;\n};\n\nexport const removeExtensionData = (extensionName, wcifEntity) => ({\n  ...wcifEntity,\n  extensions: extensions(wcifEntity).filter(extension =>\n    extension.id !== groupifierExtensionId(extensionName)\n  )\n});\n","import { sortBy } from './utils';\n\nconst events = [\n  { id: '333',    name: '3x3x3 Cube',         shortName: '3x3'   },\n  { id: '222',    name: '2x2x2 Cube',         shortName: '2x2'   },\n  { id: '444',    name: '4x4x4 Cube',         shortName: '4x4'   },\n  { id: '555',    name: '5x5x5 Cube',         shortName: '5x5'   },\n  { id: '666',    name: '6x6x6 Cube',         shortName: '6x6'   },\n  { id: '777',    name: '7x7x7 Cube',         shortName: '7x7'   },\n  { id: '333bf',  name: '3x3x3 Blindfolded',  shortName: '3BLD'  },\n  { id: '333fm',  name: '3x3x3 Fewest Moves', shortName: 'FMC'   },\n  { id: '333oh',  name: '3x3x3 One-Handed',   shortName: '3OH'   },\n  { id: '333ft',  name: '3x3x3 With Feet',    shortName: '3WF'   },\n  { id: 'minx',   name: 'Megaminx',           shortName: 'Minx'  },\n  { id: 'pyram',  name: 'Pyraminx',           shortName: 'Pyra'  },\n  { id: 'clock',  name: 'Clock',              shortName: 'Clock' },\n  { id: 'skewb',  name: 'Skewb',              shortName: 'Skewb' },\n  { id: 'sq1',    name: 'Square-1',           shortName: 'Sq1'   },\n  { id: '444bf',  name: '4x4x4 Blindfolded',  shortName: '4BLD'  },\n  { id: '555bf',  name: '5x5x5 Blindfolded',  shortName: '5BLD'  },\n  { id: '333mbf', name: '3x3x3 Multi-Blind',  shortName: 'MBLD'  }\n];\n\nexport const eventNameById = eventId =>\n  propertyById('name', eventId);\n\nexport const shortEventNameById = eventId =>\n  propertyById('shortName', eventId);\n\nconst propertyById = (property, eventId) =>\n  events.find(event => event.id === eventId)[property];\n\nexport const sortWcifEvents = wcifEvents =>\n  sortBy(wcifEvents, wcifEvent => events.findIndex(event => event.id === wcifEvent.id));\n","import { mapIn, flatMap, zip, scaleToOne, isPresentDeep } from './utils';\nimport { getExtensionData, setExtensionData } from './wcif-extensions';\nimport { suggestedGroupCount, suggestedScramblerCount, suggestedRunnerCount } from './formulas';\nimport { eventNameById } from './events';\n\nexport const parseActivityCode = activityCode => {\n  const [, e, r, g, a] = activityCode.match(/(\\w+)(?:-r(\\d+))?(?:-g(\\d+))?(?:-a(\\d+))?/);\n  return {\n    eventId: e,\n    roundNumber: r && parseInt(r, 10),\n    groupNumber: g && parseInt(g, 10),\n    attemptNumber: a && parseInt(a, 10)\n  };\n};\n\nexport const activityCodeToName = activityCode => {\n  const { eventId, roundNumber, groupNumber, attemptNumber } = parseActivityCode(activityCode);\n  return [\n    eventId && eventNameById(eventId),\n    roundNumber && `Round ${roundNumber}`,\n    groupNumber && `Group ${groupNumber}`,\n    attemptNumber && `Attempt ${attemptNumber}`\n  ].filter(x => x).join(', ');\n};\n\nexport const shouldHaveGroups = activity => {\n  const { eventId, roundNumber, groupNumber, attemptNumber } = parseActivityCode(activity.activityCode);\n  return !!(eventId && roundNumber && !groupNumber && !attemptNumber);\n};\n\nexport const activityDuration = activity =>\n  new Date(activity.endTime) - new Date(activity.startTime);\n\nexport const activityStations = (wcif, activity) => {\n  const room = rooms(wcif).find(room => room.activities.includes(activity));\n  return getExtensionData('Room', room).stations;\n};\n\nexport const populateActivitiesConfig = (wcif, expectedCompetitorsByRound, defaults) => {\n  const activitiesWithConfig = flatMap(wcif.events, event => {\n    return flatMap(event.rounds, round => {\n      const { roundNumber } = parseActivityCode(round.id);\n      const expectedRoundCompetitors = expectedCompetitorsByRound[round.id].length;\n      const activities = roundActivities(wcif, round.id).filter(shouldHaveGroups);\n      const capacities = scaleToOne(activities.map(activity =>\n        activityStations(wcif, activity) * activityDuration(activity)\n      ));\n      return zip(activities, capacities).map(([activity, capacity]) => {\n        const stations = activityStations(wcif, activity);\n        const competitors = Math.round(capacity * expectedRoundCompetitors);\n        const groups = suggestedGroupCount(competitors, stations, roundNumber);\n        const scramblers = defaults.assignScramblers ? suggestedScramblerCount(competitors / groups, stations) : 0;\n        const runners = defaults.assignRunners ? suggestedRunnerCount(competitors / groups, stations) : 0;\n        const assignJudges = stations > 0 && defaults.assignJudges;\n        console.log(assignJudges);\n        return setExtensionData('Activity', activity, {\n          capacity, groups, scramblers, runners, assignJudges\n        });\n      });\n    });\n  });\n  return activitiesWithConfig.reduce(updateActivity, wcif);\n};\n\nexport const updateActivity = (wcif, updatedActivity) =>\n  mapIn(wcif, ['schedule', 'venues'], venue =>\n    mapIn(venue, ['rooms'], room =>\n      mapIn(room, ['activities'], activity =>\n        activity.id === updatedActivity.id ? updatedActivity : activity\n      )\n    )\n  );\n\nexport const anyActivityConfigured = wcif =>\n  rooms(wcif).some(room =>\n    room.activities.some(activity => getExtensionData('Activity', activity))\n  );\n\nexport const activitiesConfigComplete = wcif =>\n  rooms(wcif).every(room =>\n    room.activities\n      .filter(shouldHaveGroups)\n      .map(activity => getExtensionData('Activity', activity))\n      .every(isPresentDeep)\n  );\n\nexport const roomsConfigComplete = wcif =>\n  rooms(wcif)\n    .map(room => getExtensionData('Room', room))\n    .every(isPresentDeep);\n\nexport const activitiesOverlap = (first, second) =>\n  first.startTime < second.endTime && second.startTime < first.endTime;\n\nexport const activitiesIntersection = (first, second) => {\n  if (!activitiesOverlap(first, second)) return 0;\n  const [, middleStart, middleEnd] = [first.startTime, first.endTime, second.startTime, second.endTime].sort();\n  /* Time distance between the two middle points in time. */\n  return new Date(middleEnd) - new Date(middleStart);\n};\n\nconst allActivities = wcif => {\n  const allChildActivities = ({ childActivities }) =>\n    childActivities.length > 0\n      ? [...childActivities, ...flatMap(childActivities, allChildActivities)]\n      : childActivities;\n  const activities = flatMap(rooms(wcif), room => room.activities);\n  return [...activities, ...flatMap(activities, allChildActivities)];\n};\n\nexport const maxActivityId = wcif =>\n  Math.max(...allActivities(wcif).map(activity => activity.id));\n\n/* Assigning tasks invokes activityById enormous number of times.\n   But during that process activities (schedule) don't change.\n   Caching is gives an invaluable speed boos in this case. */\nconst activitiesByIdCachedBySchedule = new Map();\n\nexport const activityById = (wcif, activityId) => {\n  if (activitiesByIdCachedBySchedule.has(wcif.schedule)) {\n    return activitiesByIdCachedBySchedule.get(wcif.schedule).get(activityId);\n  } else {\n    const activities = allActivities(wcif);\n    const activitiesById = new Map(activities.map(activity => [activity.id, activity]));\n    activitiesByIdCachedBySchedule.set(wcif.schedule, activitiesById);\n    return activitiesById.get(activityId);\n  }\n}\n\nexport const hasDistributedAttempts = activityCode =>\n  ['333fm', '333mbf'].includes(parseActivityCode(activityCode).eventId);\n\nexport const roundActivities = (wcif, roundId) =>\n  flatMap(rooms(wcif), room =>\n    room.activities.filter(({ activityCode }) => activityCode.startsWith(roundId))\n  );\n\nexport const roundGroupActivities = (wcif, roundId) =>\n  flatMap(roundActivities(wcif, roundId), activity =>\n    hasDistributedAttempts(roundId) ? [activity] : activity.childActivities\n  );\n\nexport const activityAssigned = (wcif, activityId) =>\n  wcif.persons.some(person =>\n    (person.assignments || []).some(assignment => assignment.activityId === activityId)\n  );\n\nexport const groupActivitiesAssigned = (wcif, roundId) =>\n  roundGroupActivities(wcif, roundId).some(activity =>\n    activityAssigned(wcif, activity.id)\n  );\n\nconst roundsWithoutResults = wcif =>\n  wcif.events\n    .map(event => event.rounds.find(round => round.results.length === 0))\n    .filter(round => round);\n\nexport const roundsMissingAssignments = wcif =>\n  roundsWithoutResults(wcif)\n    .filter(round => !groupActivitiesAssigned(wcif, round.id));\n\nexport const roundsMissingScorecards = wcif =>\n  roundsWithoutResults(wcif)\n    .filter(round => groupActivitiesAssigned(wcif, round.id))\n    .filter(round => parseActivityCode(round.id).eventId !== '333fm');\n\nexport const anyCompetitorAssignment = wcif =>\n  wcif.persons.some(person =>\n    (person.assignments || []).some(assignment => assignment.assignmentCode === 'competitor')\n  );\n\nexport const allGroupsCreated = wcif =>\n  wcif.events.every(event =>\n    event.rounds.every(round =>\n      roundGroupActivities(wcif, round.id).length > 0\n    )\n  );\n\nexport const anyGroupAssignedOrCreated = wcif =>\n  wcif.events.some(event =>\n    event.rounds.some(round =>\n      hasDistributedAttempts(event.id)\n        ? anyCompetitorAssignment(wcif, round.id)\n        : roundGroupActivities(wcif, round.id).length > 0\n    )\n  );\n\nexport const anyResults = wcif =>\n  wcif.events.some(event =>\n    event.rounds.some(round => round.results.length > 0)\n  );\n\nexport const rooms = wcif =>\n  flatMap(wcif.schedule.venues, venue => venue.rooms);\n","export const suggestedGroupCount = (competitors, stations, roundNumber) => {\n  if (stations === 0) return 1;\n  const preferredGroupSize = stations * 1.7;\n  /* We calculate the number of perfectly-sized groups, and round it up starting from x.1,\n     this way we don't end up with much more than the perfect amount of people in a single group.\n     Having more small groups is preferred over having fewer big groups. */\n  const calculatedGroupCount = Math.round(competitors / preferredGroupSize + 0.4);\n  /* Suggest at least 2 groups for first rounds, so that there are people to scramble. */\n  return Math.max(calculatedGroupCount, roundNumber === 1 ? 2 : 1);\n};\n\n/* Take min{groupCompetitors, stations} (i.e. stations in use) and suggest one scrambler for each 5 of them. */\nexport const suggestedScramblerCount = (groupCompetitors, stations) =>\n  Math.floor(1 + (Math.min(groupCompetitors, stations) - 1) / 5);\n\n/* Take min{groupCompetitors, stations} (i.e. stations in use) and suggest one runner for each 8 of them. */\nexport const suggestedRunnerCount = (groupCompetitors, stations) =>\n  Math.floor(1 + (Math.min(groupCompetitors, stations) - 1) / 8);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '@material-ui/core/Icon';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\n\nimport { roomsConfigComplete, activitiesConfigComplete, anyCompetitorAssignment } from '../../../logic/activities';\n\nconst menuItems = [\n  { path: '/roles', text: \"Edit roles\", icon: 'perm_contact_calendar', enabled: wcif => true },\n  { path: '/config', text: \"Configure\", icon: 'settings', enabled: wcif => true },\n  { path: '/groups', text: \"Manage groups\", icon: 'people', enabled: wcif => roomsConfigComplete(wcif) && activitiesConfigComplete(wcif) },\n  { path: '/printing', text: \"Print documents\", icon: 'print', enabled: wcif => anyCompetitorAssignment(wcif) }\n];\n\nconst CompetitionMenu = ({ wcif, baseUrl }) => (\n  <Paper>\n    <List>\n      {menuItems.map(menuItem =>\n        <ListItem key={menuItem.path} button component={Link} to={`${baseUrl}${menuItem.path}`} disabled={!menuItem.enabled(wcif)}>\n          <ListItemIcon><Icon>{menuItem.icon}</Icon></ListItemIcon>\n          <ListItemText primary={menuItem.text} />\n        </ListItem>\n      )}\n    </List>\n  </Paper>\n);\n\nexport default CompetitionMenu;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst RoomName = ({ room }) => (\n  <Typography variant=\"subtitle2\">\n    <span style={{\n        display: 'inline-block',\n        width: 10, height: 10, marginRight: 5,\n        borderRadius: '100%', backgroundColor: room.color\n      }}\n    />\n    <span>{room.name}</span>\n  </Typography>\n);\n\nexport default RoomName;\n","import React, { PureComponent } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class PositiveIntegerInput extends PureComponent {\n  /* Prevent from entering characters like minus, plus and dot.\n     These don't trigger the change event for numeric input. */\n  handleKeyPress = event => {\n    if (event.key.match(/\\D/)) event.preventDefault();\n  };\n\n  handleTextFieldChange = event => {\n    const newValue = event.target.value.length > 0 ? parseInt(event.target.value, 10) : null;\n    if (newValue === null || (!Number.isNaN(newValue) && newValue >= 1)) {\n      this.props.onChange(event, newValue);\n    }\n  };\n\n  render() {\n    const { value, onChange, ...props } = this.props;\n\n    return (\n      <TextField\n        {...props}\n        type=\"number\"\n        value={value === null ? '' : value}\n        onKeyPress={this.handleKeyPress}\n        onChange={this.handleTextFieldChange}\n      />\n    );\n  }\n};\n","import React, { PureComponent, Fragment } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport PositiveIntegerInput from '../PositiveIntegerInput/PositiveIntegerInput';\n\nexport default class ZeroablePositiveIntegerInput extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n  }\n\n  handleCheckboxChange = event => {\n    const { checked } = event.target;\n    this.props.onChange(event, checked ? null : 0);\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.value === 0 && this.props.value !== 0) {\n      this.inputRef.current.focus();\n    }\n  }\n\n  render() {\n    const { value, disabled, ...props } = this.props;\n\n    return (\n      <Fragment>\n        <PositiveIntegerInput {...props} value={value} disabled={value === 0 || disabled} inputRef={this.inputRef} />\n        <Checkbox name={props.name} checked={value !== 0} onChange={this.handleCheckboxChange} disabled={disabled} />\n      </Fragment>\n    );\n  }\n};\n","import React, { Component } from 'react';\n\nimport RoomName from '../../../common/RoomName/RoomName';\nimport ZeroablePositiveIntegerInput from '../../../common/ZeroablePositiveIntegerInput/ZeroablePositiveIntegerInput';\nimport { setIn } from '../../../../logic/utils';\nimport { getExtensionData, setExtensionData } from '../../../../logic/wcif-extensions';\n\nexport default class RoomConfig extends Component {\n  get roomData() {\n    return getExtensionData('Room', this.props.room) || { stations: null };\n  }\n\n  handleInputChange = (event, value) => {\n    const { room, onChange } = this.props;\n    onChange(\n      setExtensionData('Room', room, setIn(\n        this.roomData, [event.target.name], value)\n      )\n    );\n  };\n\n  render() {\n    const { room, disabled } = this.props;\n\n    return (\n      <div>\n        <RoomName room={room} />\n        <ZeroablePositiveIntegerInput\n          label=\"Timing stations\"\n          value={this.roomData.stations}\n          name=\"stations\"\n          onChange={this.handleInputChange}\n          disabled={disabled}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport RoomConfig from '../RoomConfig/RoomConfig';\nimport { mapIn } from '../../../../logic/utils';\nimport { anyActivityConfigured, rooms } from '../../../../logic/activities';\n\nexport default class RoomsConfig extends Component {\n  handleRoomChange = updatedRoom => {\n    const { wcif, onWcifChange } = this.props;\n    onWcifChange(\n      mapIn(wcif, ['schedule', 'venues'], venue =>\n        mapIn(venue, ['rooms'], room =>\n          room.id === updatedRoom.id ? updatedRoom : room\n        )\n      )\n    );\n  };\n\n  render() {\n    const { wcif } = this.props;\n    /* Disable rooms configuration once activities config has been populated. */\n    const disabled = anyActivityConfigured(wcif);\n\n    return (\n      <Paper style={{ padding: 16 }}>\n        <Grid container spacing={16}>\n          {rooms(wcif).map(room =>\n            <Grid item lg key={room.id}>\n              <RoomConfig room={room} onChange={this.handleRoomChange} disabled={disabled} />\n            </Grid>\n          )}\n        </Grid>\n      </Paper>\n    );\n  }\n}\n","import React from 'react';\n\nconst CubingIcon = ({ eventId, ...props }) => (\n  <span style={{ fontSize: 24 }} className={`cubing-icon event-${eventId}`} {...props} />\n);\n\nexport default CubingIcon;\n","import React, { Component } from 'react';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport CubingIcon from '../CubingIcon/CubingIcon';\nimport { eventNameById } from '../../../logic/events';\n\nexport default class EventSelect extends Component {\n  render() {\n    const { selected, events } = this.props;\n\n    return (\n      <div>\n        {events.map(event => (\n          <Tooltip key={event.id} title={eventNameById(event.id)} placement=\"top\">\n            <IconButton onClick={() => this.props.onChange(event.id)}>\n              <CubingIcon eventId={event.id} style={{ opacity: event.id === selected ? 1 : 0.3 }} />\n            </IconButton>\n          </Tooltip>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Icon from '@material-ui/core/Icon';\nimport Typography from '@material-ui/core/Typography';\n\nimport { activityCodeToName } from '../../../../logic/activities';\n\nexport default class RoundWithGroups extends Component {\n  handlePanelChange = (event, expanded) => {\n    const { onChange, roundId } = this.props;\n    onChange(expanded ? roundId : null);\n  };\n\n  scrollToElement = node => {\n    /* Node is the panel content, so the panel is its parent. */\n    window.scrollTo({\n      top: node.parentNode.getBoundingClientRect().top - 8,\n      behavior: 'smooth'\n    });\n  };\n\n  render() {\n    const { expanded, roundId, render } = this.props;\n\n    return (\n      <ExpansionPanel\n        onChange={this.handlePanelChange}\n        expanded={expanded}\n        CollapseProps={{ onEntered: this.scrollToElement }}\n      >\n        <ExpansionPanelSummary expandIcon={<Icon>expand_more</Icon>}>\n          <Typography variant=\"subtitle1\">\n            {activityCodeToName(roundId)}\n          </Typography>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails>\n          {expanded && render(roundId)}\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport EventSelect from '../../common/EventSelect/EventSelect';\nimport RoundPanel from './RoundPanel/RoundPanel';\n\nexport default class RoundsNavigation extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedEventId: props.events[0].id,\n      expandedRoundId: null\n    };\n  }\n\n  handleEventChange = eventId => {\n    this.setState({ selectedEventId: eventId });\n  };\n\n  handleRoundChange = roundId => {\n    this.setState({ expandedRoundId: roundId });\n  };\n\n  render() {\n    const { selectedEventId, expandedRoundId } = this.state;\n    const { events, render } = this.props;\n    const selectedEvent = events.find(event => event.id === selectedEventId);\n\n    return (\n      <Grid container spacing={8} justify=\"flex-end\">\n        <Grid item xs={12}>\n          <EventSelect selected={selectedEventId} events={events} onChange={this.handleEventChange} />\n        </Grid>\n        <Grid item xs={12}>\n          {selectedEvent.rounds.map(round => (\n            <RoundPanel\n              key={round.id}\n              expanded={round.id === expandedRoundId}\n              roundId={round.id}\n              render={render}\n              onChange={this.handleRoundChange}\n            />\n          ))}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Grid from '@material-ui/core/Grid';\n\nimport PositiveIntegerInput from '../../../common/PositiveIntegerInput/PositiveIntegerInput';\nimport ZeroablePositiveIntegerInput from '../../../common/ZeroablePositiveIntegerInput/ZeroablePositiveIntegerInput';\nimport { setIn, pluralize } from '../../../../logic/utils';\nimport { getExtensionData, setExtensionData } from '../../../../logic/wcif-extensions';\nimport { activityAssigned } from '../../../../logic/activities';\n\nexport default class RoundActivityConfig extends Component {\n  handlePropertyChange = (property, value) => {\n    const { activity, onChange } = this.props;\n    onChange(\n      setExtensionData('Activity', activity, setIn(getExtensionData('Activity', activity), [property], value))\n    );\n  };\n\n  handleInputChange = (event, value) => {\n    this.handlePropertyChange(event.target.name, value);\n  };\n\n  handleCheckboxChange = event => {\n    const { name, checked } = event.target;\n    this.handlePropertyChange(name, checked);\n  };\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.activity !== nextProps.activity;\n  }\n\n  render() {\n    const { activity, room, expectedCompetitors, wcif } = this.props;\n    const { groups, scramblers, runners, assignJudges, capacity } = getExtensionData('Activity', activity);\n\n    const stations = getExtensionData('Room', room).stations;\n    const competitors = Math.round(expectedCompetitors.length * capacity);\n    const groupSize = Math.round(competitors / groups);\n\n    const groupsHelperText = groups\n      ? pluralize(groupSize, 'person', 'people') + ' in group'\n      : ' ';\n    const scramblersHelperText = scramblers\n      ? pluralize(Math.round(groupSize / scramblers), 'cube') + ' per scrambler'\n      : ' ';\n    const runnersHelperText = runners\n      ? pluralize(Math.round(stations / runners), 'station') + ' per runner'\n      : ' ';\n\n    const groupsCreated = activity.childActivities.length > 0;\n    const groupsAssigned = activity.childActivities.some(({ id }) => activityAssigned(wcif, id));\n\n    return (\n      <Grid container direction=\"column\">\n        <Grid item>\n          <PositiveIntegerInput\n            label=\"Groups\"\n            value={groups}\n            name=\"groups\"\n            helperText={groupsHelperText}\n            onChange={this.handleInputChange}\n            margin=\"dense\"\n            disabled={groupsCreated || groupsAssigned}\n          />\n        </Grid>\n        <Grid item>\n          <ZeroablePositiveIntegerInput\n            label=\"Scramblers\"\n            value={scramblers}\n            name=\"scramblers\"\n            helperText={scramblersHelperText}\n            onChange={this.handleInputChange}\n            margin=\"dense\"\n            disabled={groupsAssigned}\n          />\n        </Grid>\n        <Grid item>\n          <ZeroablePositiveIntegerInput\n            label=\"Runners\"\n            value={runners}\n            name=\"runners\"\n            helperText={runnersHelperText}\n            onChange={this.handleInputChange}\n            margin=\"dense\"\n            disabled={groupsAssigned}\n          />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={assignJudges}\n                name=\"assignJudges\"\n                onChange={this.handleCheckboxChange}\n                disabled={stations === 0 || groupsAssigned}\n              />\n            }\n            label=\"Assign judges\"\n          />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport RoundActivityConfig from '../RoundActivityConfig/RoundActivityConfig';\nimport RoomName from '../../../common/RoomName/RoomName';\nimport { flatMap } from '../../../../logic/utils';\nimport { updateActivity, rooms } from '../../../../logic/activities';\n\nexport default class RoundConfig extends PureComponent {\n  handleActivityChange = activity => {\n    const { wcif, onWcifChange } = this.props;\n    onWcifChange(updateActivity(wcif, activity));\n  };\n\n  render() {\n    const { roundId, wcif, expectedCompetitorsByRound } = this.props;\n\n    const activitiesWithRooms = flatMap(rooms(wcif), room =>\n      room.activities\n        .filter(activity => activity.activityCode === roundId)\n        .map(activity => [activity, room])\n    );\n\n    return (\n      <Grid container spacing={16}>\n        {activitiesWithRooms.map(([activity, room]) =>\n          <Grid item xs key={activity.id}>\n            <RoomName room={room} />\n            <RoundActivityConfig\n              wcif={wcif}\n              activity={activity}\n              room={room}\n              onChange={this.handleActivityChange}\n              expectedCompetitors={expectedCompetitorsByRound[roundId]}\n            />\n          </Grid>\n        )}\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport RoundsNavigation from '../../../common/RoundsNavigation/RoundsNavigation';\nimport RoundConfig from '../RoundConfig/RoundConfig';\nimport { populateActivitiesConfig, anyActivityConfigured, hasDistributedAttempts } from '../../../../logic/activities';\n\nexport default class RoundsConfig extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assignScramblers: true,\n      assignRunners: true,\n      assignJudges: true\n    };\n  }\n\n  handleCheckboxChange = event => {\n    const { name, checked } = event.target;\n    this.setState({ [name]: checked });\n  };\n\n  handleNextClick = () => {\n    const { wcif, expectedCompetitorsByRound, onWcifChange } = this.props;\n    onWcifChange(populateActivitiesConfig(wcif, expectedCompetitorsByRound, this.state));\n  };\n\n  render() {\n    const { wcif } = this.props;\n    const events = wcif.events.filter(event => !hasDistributedAttempts(event.id));\n\n    return anyActivityConfigured(wcif) ? (\n      <RoundsNavigation events={events} render={this.renderRound} />\n    ) : (\n      <Paper style={{ padding: 16 }}>\n        <Typography variant=\"h5\">Generate configuration</Typography>\n        <Grid container direction=\"column\">\n          <Grid item style={{ margin: '0.5em 0' }}>\n            <Typography variant=\"body1\">\n              Which of the following roles would you like to assign?\n            </Typography>\n          </Grid>\n          {['Scramblers', 'Runners', 'Judges'].map(roleLabel =>\n            <Grid item key={roleLabel}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state[`assign${roleLabel}`]}\n                    name={`assign${roleLabel}`}\n                    onChange={this.handleCheckboxChange}\n                  />\n                }\n                label={roleLabel}\n              />\n            </Grid>\n          )}\n        </Grid>\n        <Button onClick={this.handleNextClick}>\n          Next\n        </Button>\n      </Paper>\n    );\n  }\n\n  renderRound = roundId => {\n    const { wcif, expectedCompetitorsByRound, onWcifChange } = this.props;\n\n    return (\n      <RoundConfig\n        roundId={roundId}\n        expectedCompetitorsByRound={expectedCompetitorsByRound}\n        wcif={wcif}\n        onWcifChange={onWcifChange}\n      />\n    );\n  };\n}\n","const searchParams = new URLSearchParams(window.location.search);\nconst production = process.env.NODE_ENV === 'production' && !searchParams.get('staging');\n\nexport const WCA_ORIGIN = production\n  ? 'https://www.worldcubeassociation.org'\n  : 'https://staging.worldcubeassociation.org';\n\nexport const WCA_OAUTH_CLIENT_ID = production\n  ? '7af43bdb765a9b555e09cc575351d15acee640c0db098626e40e8d1ee352ec3a'\n  : 'example-application-id';\n","import { WCA_ORIGIN, WCA_OAUTH_CLIENT_ID } from './wca-env';\n\n/**\n * Checks the URL hash for presence of OAuth access token\n * and saves it in the local storage if it's found.\n * Should be called on application initialization (before any kind of router takes over the location).\n */\nexport const initializeAuth = () => {\n  const hash = window.location.hash.replace(/^\\W*/, '');\n  const hashParams = new URLSearchParams(hash);\n  if (hashParams.has('access_token')) {\n    localStorage.setItem('Groupifier.accessToken', hashParams.get('access_token'));\n  }\n  if (hashParams.has('expires_in')) {\n    /* Expire the token 15 minutes before it actually does,\n       this way it doesn't expire right after the user enters the page. */\n    const expiresInSeconds = hashParams.get('expires_in') - 15 * 60;\n    const expirationTime = new Date(new Date().getTime() + expiresInSeconds * 1000);\n    localStorage.setItem('Groupifier.expirationTime', expirationTime.toISOString());\n  }\n  /* If the token expired, sign the user out. */\n  const expirationTime = localStorage.getItem('Groupifier.expirationTime');\n  if (expirationTime && new Date() >= new Date(expirationTime)) {\n    signOut();\n  }\n  /* Clear the hash only if there is a token, otherwise it may be a router path. */\n  if (hashParams.has('access_token')) {\n    window.location.hash = '';\n  }\n};\n\nexport const wcaAccessToken = () =>\n  localStorage.getItem('Groupifier.accessToken');\n\nexport const signIn = () => {\n  const redirectUri = window.location.href.split('/#')[0];\n  const params = new URLSearchParams({\n    client_id: WCA_OAUTH_CLIENT_ID,\n    response_type: 'token',\n    redirect_uri: redirectUri,\n    scope: 'manage_competitions'\n  });\n  window.location = `${WCA_ORIGIN}/oauth/authorize?${params}`\n};\n\nexport const signOut = () =>\n  localStorage.removeItem('Groupifier.accessToken');\n\nexport const isSignedIn = () => !!wcaAccessToken();\n","import { wcaAccessToken } from './auth';\nimport { WCA_ORIGIN } from './wca-env';\n\nexport const getUpcomingManageableCompetitions = () => {\n  const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n  const params = new URLSearchParams({\n    managed_by_me: true,\n    start: oneWeekAgo.toISOString()\n  });\n  return wcaApiFetch(`/competitions?${params}}`);\n};\n\nexport const getCompetitionWcif = competitionId =>\n  wcaApiFetch(`/competitions/${competitionId}/wcif`);\n\nexport const saveWcifChanges = (wcif, updatedWcif) =>\n  Promise.all([\n    wcif.persons !== updatedWcif.persons && patchWcifAttribute(updatedWcif, 'persons'),\n    wcif.events !== updatedWcif.events && patchWcifAttribute(updatedWcif, 'events'),\n    wcif.schedule !== updatedWcif.schedule && patchWcifAttribute(updatedWcif, 'schedule'),\n  ]);\n\nconst patchWcifAttribute = (wcif, attribute) =>\n  wcaApiFetch(`/competitions/${wcif.id}/wcif/${attribute}`, { method: 'PATCH', body: JSON.stringify(wcif[attribute]) });\n\nconst wcaApiFetch = (path, fetchOptions = {}) => {\n  const baseApiUrl = `${WCA_ORIGIN}/api/v0`;\n\n  return fetch(`${baseApiUrl}${path}`, Object.assign({}, fetchOptions, {\n    headers: new Headers({\n      'Authorization': `Bearer ${wcaAccessToken()}`,\n      'Content-Type': 'application/json'\n    })\n  }))\n  .then(response => response.json());\n};\n","import React, { Component, Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport { saveWcifChanges } from '../../../logic/wca-api';\n\nexport default class SaveWcifButton extends Component {\n  state = {\n    saving: false,\n    failed: false\n  };\n\n  handleSaveClick = () => {\n    const { wcif, updatedWcif, onWcifUpdate, history } = this.props;\n    this.setState({ saving: true, failed: false });\n    saveWcifChanges(wcif, updatedWcif)\n      .then(() => {\n        onWcifUpdate(updatedWcif);\n        history.push(`/competitions/${updatedWcif.id}`);\n      })\n      .catch(() => this.setState({ saving: false, failed: true }));\n  };\n\n  handleSnackbarClose = () => {\n    this.setState({ failed: false });\n  };\n\n  render() {\n    const { saving, failed } = this.state;\n    const { disabled } = this.props;\n    return (\n      <Fragment>\n        <Snackbar\n          open={failed}\n          message=\"Failed to save data to the WCA website.\"\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          autoHideDuration={5000}\n          onClose={this.handleSnackbarClose}\n        />\n        <Button variant=\"contained\" color=\"primary\" onClick={this.handleSaveClick} disabled={disabled || saving}>\n          <span style={saving ? { visibility: 'hidden' } : {}}>Save</span>\n          {saving && <CircularProgress size={20} style={{ position: 'absolute' }} />}\n        </Button>\n      </Fragment>\n    );\n  }\n}\n","import { parseActivityCode, activityCodeToName, activityById } from './activities';\nimport { sortBy, sortByArray } from './utils';\n\nexport const best = (person, eventId, type) => {\n  if (!['single', 'average'].includes(type)) {\n    throw new Error(`Personal best type must be either 'single' or 'average'. Received '${type}'.`);\n  }\n  const personalBest = person.personalBests.find(pb => pb.eventId === eventId && pb.type === type);\n  return personalBest ? personalBest.best : Infinity;\n};\n\nexport const bestAverageAndSingle = (competitor, eventId) =>\n  [best(competitor, eventId, 'average'), best(competitor, eventId, 'single')];\n\nconst competitorsExpectedToAdvance = (sortedCompetitors, advancementCondition, eventId) => {\n  switch (advancementCondition.type) {\n    case 'ranking':\n      return sortedCompetitors.slice(0, advancementCondition.level);\n    case 'percent':\n      return sortedCompetitors.slice(0, Math.floor(sortedCompetitors.length * advancementCondition.level * 0.01));\n    case 'attemptResult':\n      /* Assume that competitors having personal best better than the advancement condition will make it to the next round. */\n      return sortedCompetitors.filter(person => best(person, eventId, 'single') < advancementCondition.level);\n    default:\n      throw new Error(`Unrecognised AdvancementCondition type: '${advancementCondition.type}'`);\n  }\n};\n\nexport const getExpectedCompetitorsByRound = wcif =>\n  wcif.events.reduce((expectedCompetitorsByRound, event) => {\n    const [firstRound, ...nextRounds] = event.rounds;\n    const registeredCompetitors = wcif.persons.filter(person =>\n      person.registration && person.registration.eventIds.includes(event.id)\n    );\n    expectedCompetitorsByRound[firstRound.id] = sortByArray(registeredCompetitors,\n      competitor => bestAverageAndSingle(competitor, event.id)\n    );\n    nextRounds.reduce(([round, competitors], nextRound) => {\n      const advancementCondition = round.advancementCondition;\n      if (!advancementCondition) throw new Error(`Mising advancement condition for ${activityCodeToName(round.id)}.`);\n      const nextRoundCompetitors = competitorsExpectedToAdvance(competitors, advancementCondition, event.id);\n      expectedCompetitorsByRound[nextRound.id] = nextRoundCompetitors;\n      return [nextRound, nextRoundCompetitors];\n    }, [firstRound, expectedCompetitorsByRound[firstRound.id]]);\n    return expectedCompetitorsByRound;\n  }, {});\n\nconst satisfiesAdvancementCondition = (result, advancementCondition, resultCount) => {\n  const { type, level } = advancementCondition;\n  if (type === 'ranking') return result.ranking <= level;\n  if (type === 'percent') return result.ranking <= Math.floor(resultCount * level * 0.01);\n  if (type === 'attemptResult') return result.attempts.some(attempt => attempt.result < level);\n  throw new Error(`Unrecognised AdvancementCondition type: '${type}'`);\n};\n\nconst advancingResults = (results, advancementCondition) => {\n  const sortedResults = sortBy(\n    results.filter(result => result.attempts.length > 0),\n    result => result.ranking\n  );\n  const maxAdvanceable = Math.floor(sortedResults.length * 0.75); /* See: https://www.worldcubeassociation.org/regulations/#9p1 */\n  const firstNonAdvancingRank = sortedResults[maxAdvanceable].rank;\n  /* Note: this ensures that people who tied either advance altogether or not. */\n  return sortedResults\n    .filter(result => result.rank < firstNonAdvancingRank)\n    .filter(result => satisfiesAdvancementCondition(result, advancementCondition, sortedResults.length));\n};\n\nexport const competitorsForRound = (wcif, roundId) => {\n  const { eventId, roundNumber } = parseActivityCode(roundId);\n  if (roundNumber === 1) {\n    const registeredCompetitors = wcif.persons.filter(({ registration }) =>\n      registration && registration.status === 'accepted' && registration.eventIds.includes(eventId)\n    );\n    return sortByArray(registeredCompetitors,\n      competitor => bestAverageAndSingle(competitor, eventId).map(result => -result)\n    );\n  } else {\n    const previousRound = wcif.events\n      .find(event => event.id === eventId).rounds\n      .find(round => parseActivityCode(round.id).roundNumber === roundNumber - 1);\n    const { results, advancementCondition } = previousRound;\n    return sortBy(advancingResults(results, advancementCondition), result => -result.ranking)\n      .map(result => wcif.persons.find(person => person.registrantId === result.personId));\n  }\n};\n\nexport const age = person => {\n  const diffMs = Date.now() - new Date(person.birthdate).getTime();\n  return Math.floor(diffMs / (1000 * 60 * 60 * 24 * 365.2425));\n}\n\nexport const staffAssignments = person =>\n  (person.assignments || []).filter(({ assignmentCode }) => assignmentCode.startsWith('staff-'));\n\nexport const staffAssignmentsForEvent = (wcif, person, eventId) =>\n  staffAssignments(person).filter(({ activityId }) =>\n    parseActivityCode(activityById(wcif, activityId).activityCode).eventId === eventId\n  );\n\nexport const acceptedPeople = wcif =>\n  wcif.persons.filter(person => person.registration && person.registration.status === 'accepted');\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\nimport Typography from '@material-ui/core/Typography';\n\nimport RoomsConfig from './RoomsConfig/RoomsConfig';\nimport RoundsConfig from './RoundsConfig/RoundsConfig';\nimport SaveWcifButton from '../../common/SaveWcifButton/SaveWcifButton';\nimport { getExpectedCompetitorsByRound } from '../../../logic/competitors';\nimport { roomsConfigComplete, activitiesConfigComplete, anyGroupAssignedOrCreated } from '../../../logic/activities';\nimport { removeExtensionData } from '../../../logic/wcif-extensions';\nimport { mapIn } from '../../../logic/utils';\n\nexport default class ConfigManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localWcif: props.wcif,\n      tabValue: 0\n    };\n    this.expectedCompetitorsByRound = getExpectedCompetitorsByRound(props.wcif);\n  }\n\n  handleWcifChange = wcif => {\n    this.setState({ localWcif: wcif });\n  };\n\n  handleTabChange = (event, value) => {\n    this.setState({ tabValue: value });\n  };\n\n  clearConfig = () => {\n    const { localWcif } = this.state;\n    this.setState({\n      tabValue: 0,\n      localWcif: mapIn(localWcif, ['schedule', 'venues'], venue =>\n        mapIn(venue, ['rooms'], room =>\n          removeExtensionData(\n            'Room',\n            mapIn(room, ['activities'], activity => removeExtensionData('Activity', activity))\n          )\n        )\n      )\n    });\n  };\n\n  render() {\n    const { tabValue, localWcif } = this.state;\n    const { wcif, onWcifUpdate, history } = this.props;\n\n    const wcifConfigComplete = roomsConfigComplete(localWcif) && activitiesConfigComplete(localWcif);\n\n    return (\n      <Grid container spacing={8} justify=\"flex-end\">\n        <Grid item xs={12}>\n          <AppBar position=\"static\" color=\"default\">\n            <Tabs value={tabValue} onChange={this.handleTabChange} centered>\n              <Tab label=\"Rooms\" />\n              <Tab label=\"Rounds\" disabled={!roomsConfigComplete(localWcif)} />\n              <Tab label=\"General\" />\n            </Tabs>\n          </AppBar>\n        </Grid>\n        <Grid item xs={12}>\n          {tabValue === 0 && (\n            <RoomsConfig wcif={localWcif} onWcifChange={this.handleWcifChange} />\n          )}\n          {tabValue === 1 && (\n            <RoundsConfig wcif={localWcif} onWcifChange={this.handleWcifChange} expectedCompetitorsByRound={this.expectedCompetitorsByRound} />\n          )}\n          {tabValue === 2 && (\n            <Paper>\n              <Typography>General settings</Typography>\n            </Paper>\n          )}\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" component={Link} to={`/competitions/${localWcif.id}`}>\n            Cancel\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={this.clearConfig} disabled={anyGroupAssignedOrCreated(localWcif)}>\n            Clear\n          </Button>\n        </Grid>\n        <Grid item>\n          <SaveWcifButton wcif={wcif} updatedWcif={localWcif} onWcifUpdate={onWcifUpdate} history={history} disabled={!wcifConfigComplete} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nimport { activityCodeToName } from '../../../../logic/activities';\nimport { sortBy } from '../../../../logic/utils';\n\nexport default class GroupDialog extends Component {\n  render() {\n    const { wcif, groupActivity, onClose, open } = this.props;\n\n    const roles = [\n      { id: 'competitor', label: 'Competitors' },\n      { id: 'staff-scrambler', label: 'Scramblers' },\n      { id: 'staff-runner', label: 'Runners' },\n      { id: 'staff-judge', label: 'Judges' },\n    ];\n\n    const rolesWithPeople = roles.map(role => [\n      role,\n      wcif.persons.filter(person =>\n        (person.assignments || []).find(({ activityId, assignmentCode }) =>\n          activityId === groupActivity.id && assignmentCode === role.id\n        )\n      )\n    ])\n    .filter(([role, people]) => people.length > 0);\n\n    return (\n      <Dialog open={open} onClose={onClose} maxWidth={false}>\n        <DialogTitle>{activityCodeToName(groupActivity.activityCode)}</DialogTitle>\n        <DialogContent>\n          <Grid container spacing={16}>\n            {rolesWithPeople.map(([role, people]) => (\n              <Grid item xs={12} sm={6} md key={role.id}>\n                <Typography variant=\"subtitle2\">{role.label}</Typography>\n                <List dense={true} style={{ overflowY: 'auto', maxHeight: 300 }}>\n                  {sortBy(people, person => person.name).map(person => (\n                    <ListItem key={person.wcaUserId}>\n                      <ListItemText primary={person.name} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Grid>\n            ))}\n            {rolesWithPeople.length === 0 && (\n              <Grid item>\n                <Typography variant=\"body2\">No assignments for this round.</Typography>\n              </Grid>\n            )}\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Ok\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport RoundsNavigation from '../../../common/RoundsNavigation/RoundsNavigation';\nimport RoomName from '../../../common/RoomName/RoomName';\nimport GroupDialog from '../GroupDialog/GroupDialog';\nimport { parseActivityCode, hasDistributedAttempts } from '../../../../logic/activities';\nimport { flatMap, shortTime } from '../../../../logic/utils';\n\nexport default class RoundWithGroups extends Component {\n  state = {\n    openedGroupActivity: null\n  };\n\n  handleGroupClick = groupActivity => {\n    this.setState({ openedGroupActivity: groupActivity });\n  };\n\n  handleDialogClose = () => {\n    this.setState({ openedGroupActivity: null });\n  };\n\n  render() {\n    const { openedGroupActivity } = this.state;\n    const { wcif } = this.props;\n    const events = wcif.events.filter(event => !hasDistributedAttempts(event.id));\n\n    return (\n      <React.Fragment>\n        <RoundsNavigation events={events} render={this.renderRound} />\n        {openedGroupActivity && (\n          <GroupDialog\n            open={true}\n            groupActivity={openedGroupActivity}\n            wcif={wcif}\n            onClose={this.handleDialogClose}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n\n  renderRound = roundId => {\n    const { wcif } = this.props;\n    const roomsWithTimezoneAndGroups = flatMap(wcif.schedule.venues, venue =>\n      venue.rooms.map(room =>\n        [room, venue.timezone, flatMap(\n          room.activities.filter(activity => activity.activityCode === roundId),\n          activity => activity.childActivities\n        )]\n      )\n    );\n\n    return (\n      <Grid container>\n        {roomsWithTimezoneAndGroups.map(([room, timezone, groupActivities]) => (\n          groupActivities.length > 0 && (\n            <Grid item xs={12} sm key={room.id}>\n              <RoomName room={room} />\n              <List>\n                {groupActivities.map(groupActivity => (\n                  <ListItem key={groupActivity.id} button onClick={() => this.handleGroupClick(groupActivity)}>\n                    <ListItemText\n                      primary={`Group ${parseActivityCode(groupActivity.activityCode).groupNumber}`}\n                      secondary={`${shortTime(groupActivity.startTime, timezone)} - ${shortTime(groupActivity.endTime, timezone)}`}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            </Grid>\n          )\n        ))}\n      </Grid>\n    );\n  };\n}\n","import { addMilliseconds, difference, findLast, flatMap, intersection, partition,\n         scaleToOne, setIn, sortBy, sortByArray, sum, uniq, updateIn, mapIn, zip } from './utils';\nimport { getExtensionData } from './wcif-extensions';\nimport { activitiesIntersection, activitiesOverlap, activityById, activityCodeToName,\n         activityDuration, activityStations, hasDistributedAttempts, maxActivityId, parseActivityCode,\n         roundActivities, roundGroupActivities, roundsMissingAssignments, updateActivity } from './activities';\nimport { acceptedPeople, age, bestAverageAndSingle, competitorsForRound, staffAssignments, staffAssignmentsForEvent } from './competitors';\n\nexport const createGroupActivities = wcif => {\n  const rounds = flatMap(wcif.events, event => event.rounds);\n  return rounds.reduce((wcif, round) => {\n    /* For FMC and MBLD the activities are already scheduled, and there is always a single group. */\n    if (hasDistributedAttempts(round.id)) return wcif;\n    /* If there are already groups created, don't override them. */\n    if (roundGroupActivities(wcif, round.id).length > 0) return wcif;\n    const currentActivityId = maxActivityId(wcif);\n    const activitiesWithGroups = roundActivities(wcif, round.id).map(activity => {\n      const { groups } = getExtensionData('Activity', activity);\n      const totalDuration = activityDuration(activity);\n      const groupDuration = totalDuration / groups;\n      const groupActivities = Array.from({ length: groups }, (_, index) => ({\n        id: null,\n        name: null,\n        activityCode: null,\n        startTime: addMilliseconds(activity.startTime, groupDuration * index),\n        endTime: addMilliseconds(activity.startTime, groupDuration * index + groupDuration),\n        childActivities: [],\n        scrambleSetId: null\n      }));\n      return { ...activity, childActivities: groupActivities };\n    });\n    sortByArray(\n      flatMap(activitiesWithGroups, activity => activity.childActivities),\n      ({ startTime, endTime }) => [startTime, endTime]\n    ).forEach((groupActivity, index) => {\n      const activityCode = `${round.id}-g${index + 1}`;\n      /* The child activities are newly created objects, so it's fine to mutate them at this point. */\n      return Object.assign(groupActivity, {\n        id: currentActivityId + index + 1,\n        name: activityCodeToName(activityCode),\n        activityCode\n      })\n    });\n    return activitiesWithGroups.reduce(updateActivity, wcif);\n  }, wcif);\n};\n\nexport const assignTasks = wcif => {\n  const roundsToAssign = roundsMissingAssignments(wcif);\n  return [assignGroups, assignScrambling, assignRunning, assignJudging]\n    .reduce((wcif, assignmentFn) => assignmentFn(wcif, roundsToAssign), wcif);\n};\n\nconst assignGroups = (wcif, roundsToAssign) => {\n  /* Sort rounds by the number of groups, so the further the more possible timeframes there are. */\n  const sortedRoundsToAssign = sortBy(roundsToAssign, round =>\n    hasDistributedAttempts(round.id) ? -Infinity : roundGroupActivities(wcif, round.id).length\n  );\n  return sortedRoundsToAssign.reduce((wcif, round) => {\n    const competitors = competitorsForRound(wcif, round.id);\n    if (hasDistributedAttempts(round.id)) {\n      /* In this case roundActivities are attempt activities, so we assign them all to the given person. */\n      const updatedCompetitors = roundActivities(wcif, round.id).reduce((competitors, activity) =>\n        assignActivity(activity, 'competitor', competitors)\n      , competitors);\n      return updatePeople(wcif, updatedCompetitors);\n    }\n    const groupActivitiesWithCapacity = flatMap(roundActivities(wcif, round.id), activity => {\n      const { capacity } = getExtensionData('Activity', activity);\n      return activity.childActivities.map(groupActivity =>\n        [groupActivity, capacity / activity.childActivities.length]\n      );\n    });\n    const [groupActivities, capacities] = zip(...groupActivitiesWithCapacity);\n    const groupSizes = calculateGroupSizes(capacities, competitors.length);\n    const initialGroups = zip(groupActivities, groupSizes).map(([activity, size]) => ({\n      id: activity.id,\n      activity,\n      size,\n      competitors: []\n    }));\n    const sortedInitialGroups = sortBy(initialGroups, ({ activity }) => parseActivityCode(activity.activityCode).groupNumber);\n    const groups = competitors.reduce((groups, competitor) => {\n      const availabilityRates = groups.map(group => availabilityRate(wcif, group.activity, competitor));\n      const maxAvailabilityRate = Math.max(...availabilityRates);\n      const mostAvailableGroups = groups.filter((group, index) => availabilityRates[index] === maxAvailabilityRate);\n      const preferredGroups = mostAvailableGroups.filter(group => !overlapsEveryoneWithSameRole(wcif, groups, group.activity, competitor));\n      const potentialGroups = preferredGroups.length > 0 ? preferredGroups : mostAvailableGroups;\n      const notFullGroup = potentialGroups.find(({ size, competitors }) => competitors.length < size);\n      if (notFullGroup) {\n        return addCompetitorToGroupEnd(groups, notFullGroup.id, competitor);\n      } else {\n        const group = potentialGroups[potentialGroups.length - 1];\n        const updatedGroups = addCompetitorToGroupEnd(groups, group.id, competitor);\n        return moveSomeoneRight(wcif, updatedGroups, group.id) || moveSomeoneLeft(wcif, updatedGroups, group.id) || updatedGroups;\n      }\n    }, sortedInitialGroups);\n    const updatedCompetitors = flatMap(groups, ({ activity, competitors }) =>\n      assignActivity(activity, 'competitor', competitors)\n    );\n    return updatePeople(wcif, updatedCompetitors);\n  }, wcif);\n};\n\nconst calculateGroupSizes = ([capacity, ...capacities], competitorCount) => {\n  if (!capacity) return [];\n  const groupSize = Math.round(capacity * competitorCount);\n  return [groupSize, ...calculateGroupSizes(scaleToOne(capacities), competitorCount - groupSize)];\n};\n\nconst moveSomeoneRight = (wcif, groups, groupId) => {\n  const group = groups.find(({ id }) => id === groupId);\n  return groups.slice(groups.indexOf(group) + 1).reduce((updatedGroups, furtherGroup) => {\n    if (updatedGroups) return updatedGroups;\n    const competitorToMove = findLast(group.competitors, competitor =>\n      availabilityRate(wcif, group.activity, competitor) === availabilityRate(wcif, furtherGroup.activity, competitor)\n      && !overlapsEveryoneWithSameRole(wcif, groups, furtherGroup.activity, competitor)\n    );\n    if (!competitorToMove) return null; // Try the next group.\n    if (furtherGroup.competitors.length < furtherGroup.size) {\n      return moveCompetitorToGroupStart(groups, groupId, furtherGroup.id, competitorToMove);\n    } else if (furtherGroup.competitors.length === furtherGroup.size) {\n      const groupsWithSpot = moveSomeoneRight(wcif, groups, furtherGroup.id);\n      return groupsWithSpot && moveCompetitorToGroupStart(groupsWithSpot, groupId, furtherGroup.id, competitorToMove);\n    }\n    return null;\n  }, null);\n};\n\nconst moveSomeoneLeft = (wcif, groups, groupId) => {\n  const group = groups.find(({ id }) => id === groupId);\n  return groups.slice(0, groups.indexOf(group)).reduceRight((updatedGroups, previousGroup) => {\n    if (updatedGroups) return updatedGroups;\n    const competitorToMove = group.competitors.find(competitor =>\n      availabilityRate(wcif, group.activity, competitor) === availabilityRate(wcif, previousGroup.activity, competitor)\n      && !overlapsEveryoneWithSameRole(wcif, groups, previousGroup.activity, competitor)\n    );\n    if (!competitorToMove) return null; // Try the previous group.\n    const groupsWithSpot = moveSomeoneRight(wcif, groups, previousGroup.id);\n    return groupsWithSpot && moveCompetitorToGroupEnd(groupsWithSpot, groupId, previousGroup.id, competitorToMove);\n  }, null);\n};\n\nconst updateCompetitorsInGroup = (groups, groupId, updater) =>\n  groups.map(group => group.id === groupId ? updateIn(group, ['competitors'], updater) : group);\n\nconst addCompetitorToGroupStart = (groups, groupId, competitor) =>\n  updateCompetitorsInGroup(groups, groupId, competitors => [competitor, ...competitors]);\n\nconst addCompetitorToGroupEnd = (groups, groupId, competitor) =>\n  updateCompetitorsInGroup(groups, groupId, competitors => [...competitors, competitor]);\n\nconst removeCompetitorFromGroup = (groups, groupId, competitor) =>\n  updateCompetitorsInGroup(groups, groupId, competitors => competitors.filter(other => other !== competitor));\n\nconst moveCompetitorToGroupStart = (groups, fromGroupId, toGroupId, competitor) =>\n  addCompetitorToGroupStart(removeCompetitorFromGroup(groups, fromGroupId, competitor), toGroupId, competitor);\n\nconst moveCompetitorToGroupEnd = (groups, fromGroupId, toGroupId, competitor) =>\n  addCompetitorToGroupEnd(removeCompetitorFromGroup(groups, fromGroupId, competitor), toGroupId, competitor);\n\nconst assignScrambling = (wcif, roundsToAssign) => {\n  /* Sort rounds by the number of competitors, so the further the more people able to scramble there are. */\n  const sortedRoundsToAssign = sortBy(roundsToAssign, round => competitorsForRound(wcif, round.id).length);\n  return sortedRoundsToAssign.reduce((wcif, round) => {\n    if (hasDistributedAttempts(round.id)) return wcif;\n    const eventId = parseActivityCode(round.id).eventId;\n    return roundActivities(wcif, round.id).reduce((wcif, activity) => {\n      const { scramblers } = getExtensionData('Activity', activity);\n      if (scramblers === 0) return wcif;\n      return activity.childActivities.reduce((wcif, groupActivity) => {\n        const staffScramblers = acceptedPeople(wcif).filter(person => person.roles.includes('staff-scrambler'));\n        const competitors = difference(competitorsForRound(wcif, round.id), staffScramblers);\n        const available = people => people.filter(person => availableDuring(wcif, groupActivity, person));\n        const sortedAvailableStaff = sortByArray(available(staffScramblers), competitor => [\n          /* Avoid difference in the number of tasks bigger than 3.\n             (General note: this is better than sorting by the number of tasks,\n             as it allows one person to be assigned a couple times in a row). */\n          Math.floor(staffAssignments(competitor).length / 3),\n          /* Prefer competitors better in the given event. */\n          ...bestAverageAndSingle(competitor, eventId)\n        ]);\n        const sortedAvailableCompetitors = sortedAvailableStaff.length >= scramblers ? [] : sortByArray(available(competitors), competitor => [\n          /* Strongly prefer people at least 10 years old. */\n          age(competitor) >= 10 ? -1 : 1,\n          /* Avoid assigning tasks to people already busy due to their role. */\n          intersection(['dataentry', 'delegate', 'organizer'], competitor.roles).length,\n          /* Avoid more than two assignments for the given event. */\n          staffAssignmentsForEvent(wcif, competitor, eventId).length >= 2 ? 1 : -1,\n          /* Avoid difference in the number of tasks bigger than 6. */\n          Math.floor(staffAssignments(competitor).length / 6),\n          /* Prefer competitors who doesn't solve soon after the group ends. */\n          competesIn15Minutes(wcif, competitor, groupActivity.endTime) ? 1 : -1,\n          /* Prefer competitors better in the given event. */\n          ...bestAverageAndSingle(competitor, eventId)\n        ]);\n        const potentialScramblers = [...sortedAvailableStaff, ...sortedAvailableCompetitors];\n        const updatedCompetitors = assignActivity(groupActivity, 'staff-scrambler', potentialScramblers.slice(0, scramblers));\n        return updatePeople(wcif, updatedCompetitors);\n      }, wcif);\n    }, wcif);\n  }, wcif);\n};\n\nconst assignRunning = (wcif, roundsToAssign) => {\n  return roundsToAssign.reduce((wcif, round) => {\n    if (hasDistributedAttempts(round.id)) return wcif;\n    const eventId = parseActivityCode(round.id).eventId;\n    return roundActivities(wcif, round.id).reduce((wcif, activity) => {\n      const { runners } = getExtensionData('Activity', activity);\n      if (runners === 0) return wcif;\n      return activity.childActivities.reduce((wcif, groupActivity) => {\n        const [staffRunners, people] = partition(acceptedPeople(wcif), person => person.roles.includes('staff-runner'));\n        const available = people => people.filter(person => availableDuring(wcif, groupActivity, person));\n        const sortedAvailableStaff = sortByArray(available(staffRunners), competitor => [\n          Math.floor(staffAssignments(competitor).length / 3),\n          competesIn15Minutes(wcif, competitor, groupActivity.endTime) ? 1 : -1\n        ]);\n        const sortedAvailablePeople = sortedAvailableStaff.length >= runners ? [] : sortByArray(available(people), competitor => [\n          age(competitor) >= 10 ? -1 : 1,\n          intersection(['dataentry', 'delegate', 'organizer'], competitor.roles).length,\n          staffAssignmentsForEvent(wcif, competitor, eventId).length >= 2 ? 1 : -1,\n          Math.floor(staffAssignments(competitor).length / 6),\n          competesIn15Minutes(wcif, competitor, groupActivity.endTime) ? 1 : -1\n        ]);\n        const potentialRunners = [...sortedAvailableStaff, ...sortedAvailablePeople];\n        const updatedPeople = assignActivity(groupActivity, 'staff-runner', potentialRunners.slice(0, runners));\n        return updatePeople(wcif, updatedPeople);\n      }, wcif);\n    }, wcif);\n  }, wcif);\n};\n\nconst assignJudging = (wcif, roundsToAssign) => {\n  return roundsToAssign.reduce((wcif, round) => {\n    if (hasDistributedAttempts(round.id)) return wcif;\n    const eventId = parseActivityCode(round.id).eventId;\n    return roundActivities(wcif, round.id).reduce((wcif, activity) => {\n      const { assignJudges } = getExtensionData('Activity', activity);\n      const stations = activityStations(wcif, activity);\n      if (!assignJudges) return wcif;\n      return activity.childActivities.reduce((wcif, groupActivity) => {\n        const [staffJudges, people] = partition(acceptedPeople(wcif), person => person.roles.includes('staff-judge'));\n        const available = people => people.filter(person => availableDuring(wcif, groupActivity, person));\n        const sortedAvailableStaff = sortByArray(available(staffJudges), competitor => [\n          /* Equally distribute tasks (judging is assigned last, so we want to eliminate inequality introduced by other assignments). */\n          staffAssignments(competitor).length,\n          competesIn15Minutes(wcif, competitor, groupActivity.endTime) ? 1 : -1\n        ]);\n        const sortedAvailablePeople = sortedAvailableStaff.length >= stations ? [] : sortByArray(available(people), competitor => [\n          age(competitor) >= 10 ? -1 : 1,\n          intersection(['dataentry', 'delegate', 'organizer'], competitor.roles).length,\n          staffAssignmentsForEvent(wcif, competitor, eventId).length >= 2 ? 1 : -1,\n          /* Equally distribute tasks (judging is assigned last, so we want to eliminate inequality introduced by other assignments). */\n          staffAssignments(competitor).length,\n          competesIn15Minutes(wcif, competitor, groupActivity.endTime) ? 1 : -1,\n          /* Prefer people that solve fewer events, to avoid overloading people solving more. */\n          competitor.registration ? competitor.registration.eventIds.length : 0,\n        ]);\n        const potentialJudges = [...sortedAvailableStaff, ...sortedAvailablePeople];\n        const updatedPeople = assignActivity(groupActivity, 'staff-judge', potentialJudges.slice(0, stations));\n        return updatePeople(wcif, updatedPeople);\n      }, wcif);\n    }, wcif);\n  }, wcif);\n};\n\nconst competesIn15Minutes = (wcif, competitor, isoString) => {\n  const competingStartTimes = (competitor.assignments || [])\n    .filter(({ assignmentCode }) => assignmentCode === 'competitor')\n    .map(({ activityId }) => activityById(wcif, activityId).startTime)\n    .filter(startTime => startTime >= isoString);\n  if (competingStartTimes.length === 0) return false;\n  const competingStart = competingStartTimes.reduce((x, y) => x < y ? x : y);\n  return (new Date(competingStart) - new Date(isoString)) <= 15 * 60 * 1000;\n};\n\nconst assignActivity = (activity, assignmentCode, competitors) =>\n  competitors.map(competitor => ({\n    ...competitor,\n    assignments: [...(competitor.assignments || []), { activityId: activity.id, assignmentCode }]\n  }));\n\nconst updatePeople = (wcif, updatedPeople) =>\n  mapIn(wcif, ['persons'], person =>\n    updatedPeople.find(updatedPerson => updatedPerson.wcaUserId === person.wcaUserId) || person\n  );\n\nconst availableDuring = (wcif, activity, competitor) =>\n  !(competitor.assignments || []).some(({ activityId }) =>\n    activitiesOverlap(activityById(wcif, activityId), activity)\n  );\n\nconst availabilityRate = (wcif, activity, competitor) => {\n  const intersections = (competitor.assignments || []).map(({ activityId }) =>\n    activitiesIntersection(activityById(wcif, activityId), activity)\n  );\n  const timeWhenBusy = sum(intersections);\n  return -(timeWhenBusy / activityDuration(activity));\n};\n\nconst overlapsEveryoneWithSameRole = (wcif, groups, activity, competitor) =>\n  intersection(['dataentry', 'delegate', 'organizer'], competitor.roles)\n    .some(role => {\n      const others = acceptedPeople(wcif).filter(person => person.roles.includes(role));\n      return others.length > 0 && others.every(other =>\n        !availableDuring(wcif, activity, other)\n        || groups.some(({ activity: groupActivity, competitors }) =>\n          competitors.includes(other) && activitiesOverlap(groupActivity, activity)\n        )\n      );\n    });\n\nexport const updateScrambleSetCount = wcif =>\n  mapIn(wcif, ['events'], event =>\n    mapIn(event, ['rounds'], round =>\n      setIn(round, ['scrambleSetCount'], scrambleSetCountForRound(wcif, round.id))\n    )\n  );\n\n/* Assume one scramble set for each unique timeframe, i.e. (startTime, endTime) pair. */\nconst scrambleSetCountForRound = (wcif, roundId) =>\n  hasDistributedAttempts(roundId) ? 1 : uniq(\n    roundGroupActivities(wcif, roundId).map(({ startTime, endTime }) => startTime + endTime)\n  ).length;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\n\nimport GroupsNavigation from './GroupsNavigation/GroupsNavigation';\nimport SaveWcifButton from '../../common/SaveWcifButton/SaveWcifButton';\n\nimport { createGroupActivities, updateScrambleSetCount, assignTasks } from '../../../logic/groups';\nimport { allGroupsCreated, roundsMissingAssignments, anyResults } from '../../../logic/activities';\nimport { updateIn, mapIn, setIn } from '../../../logic/utils';\n\nexport default class GroupsManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localWcif: props.wcif\n    };\n  }\n\n  createGroupActivities = () => {\n    const { localWcif } = this.state;\n    this.setState({\n      localWcif: updateScrambleSetCount(createGroupActivities(localWcif))\n    });\n  };\n\n  assignTasks = () => {\n    const { localWcif } = this.state;\n    const start = performance.now();\n    const wcifWithAssignments = assignTasks(localWcif);\n    console.log(wcifWithAssignments, 'Took', performance.now() - start);\n    this.setState({ localWcif: wcifWithAssignments });\n  };\n\n  clearGroups = () => {\n    const { localWcif } = this.state;\n    const persons = localWcif.persons.map(person =>\n      updateIn(person, ['assignments'], assignments =>\n        (assignments || []).filter(({ assignmentCode }) =>\n          !assignmentCode.startsWith('staff-') && assignmentCode !== 'competitor'\n        )\n      )\n    );\n    const schedule = mapIn(localWcif.schedule, ['venues'], venue =>\n      mapIn(venue, ['rooms'], room =>\n        mapIn(room, ['activities'], activity => setIn(activity, ['childActivities'], []))\n      )\n    );\n    this.setState({ localWcif: { ...localWcif, persons, schedule } });\n  };\n\n  render() {\n    const { localWcif } = this.state;\n    const { wcif, onWcifUpdate, history } = this.props;\n\n    const groupsCreated = allGroupsCreated(localWcif);\n\n    return (\n      <Grid container spacing={8} justify=\"flex-end\">\n        <Grid item xs={12}>\n          {!groupsCreated && (\n            <SnackbarContent\n              style={{ maxWidth: 'none' }}\n              message=\"To assign tasks you need to create groups first. This will also determine scramble set count for each round.\"\n              action={\n                <Button onClick={this.createGroupActivities} color=\"secondary\" size=\"small\">\n                  Create groups\n                </Button>\n              }\n            />\n          )}\n          {(groupsCreated && roundsMissingAssignments(localWcif).length > 0) && (\n            <SnackbarContent\n              style={{ maxWidth: 'none' }}\n              message=\"There are rounds with no tasks assigned.\"\n              action={\n                <Button onClick={this.assignTasks} color=\"secondary\" size=\"small\">\n                  Assign tasks\n                </Button>\n              }\n            />\n          )}\n        </Grid>\n        <Grid item xs={12}>\n          <GroupsNavigation wcif={localWcif} />\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" component={Link} to={`/competitions/${localWcif.id}`}>\n            Cancel\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={this.clearGroups} disabled={anyResults(localWcif)}>\n            Clear\n          </Button>\n        </Grid>\n        <Grid item>\n          <SaveWcifButton wcif={wcif} updatedWcif={localWcif} onWcifUpdate={onWcifUpdate} history={history} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","import { parseActivityCode } from './activities';\nimport { shortEventNameById } from './events';\n\nexport const cutoffToString = (cutoff, eventId) => {\n  if (eventId === '333mbf') {\n    return `${multibldAttemptResultToPoints(cutoff.attemptResult)} points`;\n  } else if (eventId === '333fm') {\n    return `${cutoff.attemptResult} moves`;\n  } else {\n    return centisecondsToClockFormat(cutoff.attemptResult);\n  }\n}\n\nexport const timeLimitToString = (timeLimit) => {\n  const { centiseconds, cumulativeRoundIds } = timeLimit;\n  const clockFormat = centisecondsToClockFormat(centiseconds);\n  if (cumulativeRoundIds.length === 0) {\n    return clockFormat;\n  } else if (cumulativeRoundIds.length === 1) {\n    return `${clockFormat} in total`;\n  } else {\n    const roundStrings = cumulativeRoundIds.map(roundId => {\n      const { eventId, roundNumber } = parseActivityCode(roundId);\n      return `${shortEventNameById(eventId)} R${roundNumber}`;\n    });\n    return `${clockFormat} total for ${roundStrings.join(', ')}`;\n  }\n}\n\nconst multibldAttemptResultToPoints = attemptResult =>\n  99 - (Math.floor(attemptResult / 10000000) % 100);\n\nconst centisecondsToClockFormat = centiseconds => {\n  const date = new Date(null);\n  date.setUTCMilliseconds(centiseconds * 10);\n  return date.toISOString().substr(11, 11).replace(/^[0:]*(?!\\.)/g, '');\n};\n","import pdfMake from 'pdfmake/build/pdfmake';\n\n/* Asynchronously download fonts bundle for PDF Make. */\nfetch('vfs-fonts.bundle.json')\n  .then(response => response.json())\n  .then(vfsFonts => pdfMake.vfs = vfsFonts);\n\nconst singleFileFont = file => ({\n  normal: file, bold: file, italic: file, bolditalics: file\n})\n\npdfMake.fonts = {\n  Roboto: {\n    normal: 'Roboto-Regular.ttf',\n    bold: 'Roboto-Medium.ttf',\n    italics: 'Roboto-Italic.ttf',\n    bolditalics: 'Roboto-MediumItalic.ttf'\n  },\n  WenQuanYiZenHei: singleFileFont('WenQuanYiZenHei.ttf'),\n  NotoSansThai: singleFileFont('NotoSansThai-Regular.ttf'),\n  NotoSansArabic: singleFileFont('NotoSansArabic-Regular.ttf'),\n  NotoSansGeorgian: singleFileFont('NotoSansGeorgian-Regular.ttf'),\n  NotoSansArmenian: singleFileFont('NotoSansArmenian-Regular.ttf')\n};\n\nexport default pdfMake;\n","import { inRange } from './utils';\n\nconst determineFont = text => {\n  const code = text.charCodeAt(0);\n  /* Based on https://en.wikipedia.org/wiki/Unicode_block */\n  if (inRange(code, 0x0000, 0x052F)) {\n    return 'Roboto';\n  } else if (inRange(code, 0x0600, 0x06FF) || inRange(code, 0x0750, 0x077F)) {\n    return 'NotoSansArabic';\n  } else if (inRange(code, 0x0E00, 0x0E7F)) {\n    return 'NotoSansThai';\n  } else if (inRange(code, 0x0530, 0x058F)) {\n    return 'NotoSansArmenian';\n  } else if (inRange(code, 0x10A0, 0x10FF)) {\n    return 'NotoSansGeorgian';\n  } else {\n    /* Default to WenQuanYiZenHei as it supports the most characters (mostly CJK). */\n    return 'WenQuanYiZenHei';\n  }\n};\n\nexport const pdfName = (name, swapLatinWithLocalNames = false) => {\n  /* Note: support normal and fullwidth parentheses. */\n  const [, latinName, localName] = name.match(/(.+)\\s*[(（](.+)[)）]/) || [null, name, null];\n  if (!localName) return latinName;\n  const pdfNames = [latinName, { text: localName, font: determineFont(localName) }];\n  const [first, second] = swapLatinWithLocalNames ? pdfNames.reverse() : pdfNames;\n  return [first, ' (', second, ')'];\n};\n","import { flatMap, sortBy, chunk } from './utils';\nimport { parseActivityCode, roundGroupActivities } from './activities';\nimport { eventNameById } from './events';\nimport { cutoffToString, timeLimitToString } from './formatters';\nimport { competitorsForRound } from './competitors';\nimport pdfMake from './pdfmake';\nimport { pdfName } from './pdf-utils';\n\n/* See: https://github.com/bpampuch/pdfmake/blob/3da11bd8148b190808b06f7bc27883102bf82917/src/standardPageSizes.js#L10 */\nconst pageWidth = 595.28;\nconst pageHeight = 841.89;\nconst scorecardMargin = 20;\n\nconst maxAttemptCountByFormat = { '1': 1, '2': 2, '3': 3, 'm': 3, 'a': 5 };\n\nexport const downloadScorecards = (wcif, rounds) => {\n  const start = performance.now();\n  const pdfDefinition = scorecardsPdfDefinition(wcif, rounds);\n  console.log('Definition took', performance.now() - start);\n  const start2 = performance.now();\n  pdfMake.createPdf(pdfDefinition).download(`${wcif.id}-scorecards.pdf`);\n  console.log('PDF creation took', performance.now() - start2);\n};\n\nconst scorecardsPdfDefinition = (wcif, rounds) => ({\n  background: [{\n    canvas: [\n      cutLine({ x1: scorecardMargin, y1: pageHeight / 2, x2: pageWidth - scorecardMargin, y2: pageHeight / 2 }),\n      cutLine({ x1: pageWidth / 2, y1: scorecardMargin, x2: pageWidth / 2, y2:  pageHeight - scorecardMargin })\n    ]\n  }],\n  pageMargins: [scorecardMargin, scorecardMargin],\n  content: {\n    layout: {\n      /* Outer margin is done using pageMargins, we use padding for the remaining inner margins. */\n      paddingLeft  : i => i % 2 === 0 ? 0 : scorecardMargin,\n      paddingRight : i => i % 2 === 0 ? scorecardMargin : 0,\n      paddingTop   : i => i % 2 === 0 ? 0 : scorecardMargin,\n      paddingBottom: i => i % 2 === 0 ? scorecardMargin : 0,\n      /* Get rid of borders. */\n      hLineWidth: () => 0,\n      vLineWidth: () => 0\n    },\n    table: {\n      widths: ['*', '*'],\n      /* A4 page height minus vertical margins, divided into a half. */\n      heights: (pageHeight - 4 * scorecardMargin) / 2,\n      dontBreakRows: true,\n      body: chunk(scorecards(wcif, rounds), 2)\n    }\n  }\n});\n\nconst cutLine = properties => ({\n  ...properties,\n  type: 'line', lineWidth: 0.1, dash: { length: 10 }, lineColor: '#888888'\n});\n\nconst scorecards = (wcif, rounds) => {\n  return flatMap(rounds, round => {\n    const sortedGroupActivities = sortBy(roundGroupActivities(wcif, round.id),\n      ({ activityCode }) => parseActivityCode(activityCode).groupNumber\n    );\n    const sortedCompetitors = competitorsForRound(wcif, round.id);\n    let scorecardNumber = sortedCompetitors.length;\n    return flatMap(sortedGroupActivities, groupActivity => {\n      const competitors = sortedCompetitors.filter(competitor =>\n        (competitor.assignments || []).find(assignment =>\n          assignment.activityId === groupActivity.id && assignment.assignmentCode === 'competitor'\n        )\n      );\n      const groupScorecards = competitors.map(competitor =>\n        scorecard({\n          scorecardNumber: scorecardNumber--,\n          competitionName: wcif.shortName,\n          activityCode: groupActivity.activityCode,\n          round,\n          competitor\n        })\n      );\n      const scorecardsOnLastPage = groupScorecards.length % 4;\n      return scorecardsOnLastPage === 0\n        ? groupScorecards\n        : groupScorecards.concat(Array.from({ length: 4 - scorecardsOnLastPage }, () => ({})));\n    });\n  });\n};\n\nconst scorecard = ({\n  scorecardNumber,\n  competitionName,\n  activityCode,\n  round,\n  competitor\n}) => {\n  const { eventId, roundNumber, groupNumber } = parseActivityCode(activityCode);\n  const { cutoff, timeLimit } = round;\n  const attemptCount = maxAttemptCountByFormat[round.format];\n\n  return [\n    { text: scorecardNumber, fontSize: 10 },\n    { text: competitionName, bold: true, fontSize: 15, margin: [0, 0, 0, 10], alignment: 'center' },\n    {\n      margin: [25, 0, 0, 0],\n      table: {\n        widths: ['*', 'auto', 'auto'],\n        body: [\n          columnLabels(['Event', 'Round', 'Group']),\n          [eventNameById(eventId), { text: roundNumber, alignment: 'center' }, { text: groupNumber, alignment: 'center' }]\n        ]\n      }\n    },\n    {\n      margin: [25, 0, 0, 0],\n      table: {\n        widths: ['auto', '*'],\n        body: [\n          columnLabels(['ID', 'Name']),\n          [{ text: competitor.registrantId, alignment: 'center' }, { text: pdfName(competitor.name), maxHeight: 20 /* See: https://github.com/bpampuch/pdfmake/issues/264#issuecomment-108347567 */ }]\n        ]\n      }\n    },\n    {\n      margin: [0, 10, 0, 0],\n      table: {\n        widths: [16, 25, '*', 25, 25], /* Note: 16 (width) + 4 + 4 (defult left and right padding) + 1 (left border) = 25 */\n        body: [\n          columnLabels(['', 'Scr', 'Result', 'Judge', 'Comp'], { alignment: 'center' }),\n          ...attemptRows(cutoff, attemptCount),\n          [{ text: 'Extra attempt', ...noBorder, colSpan: 5, margin: [0, 1], fontSize: 10 }],\n          attemptRow('_'),\n          [{ text: '', ...noBorder, colSpan: 5, margin: [0, 1] }]\n        ]\n      }\n    },\n    {\n      fontSize: 10,\n      columns: [\n        cutoff ? { text: `Cutoff: ${cutoffToString(cutoff, eventId)}`, alignment: 'center' } : {},\n        timeLimit ? { text: `Time limit: ${timeLimitToString(timeLimit)}`, alignment: 'center' } : {}\n      ]\n    },\n  ];\n};\n\nconst columnLabels = (labels, style = {}) =>\n  labels.map(label => ({\n    ...style, ...noBorder, fontSize: 9, text: label\n  }));\n\nconst attemptRows = (cutoff, attemptCount) =>\n  Array.from({ length: attemptCount }, (_, attemptIndex) => attemptRow(attemptIndex + 1))\n    .reduce((rows, attemptRow, attemptIndex) =>\n      (attemptIndex + 1 === attemptCount)\n        ? [...rows, attemptRow]\n        : [ ...rows, attemptRow,\n            attemptsSeparator(cutoff && (attemptIndex + 1 === cutoff.numberOfAttempts))\n          ]\n    , []);\n\nconst attemptsSeparator = cutoffLine => [{\n  ...noBorder, colSpan: 5, margin: [0, 1],\n  columns: !cutoffLine ? [] : [{\n    canvas: [{\n      type: 'line',\n      x1: 0, y1: 0,\n      x2: (pageWidth - 4 * scorecardMargin) / 2, y2: 0,\n      dash: { length: 5 },\n    }]\n  }]\n}];\n\nconst attemptRow = attemptNumber =>\n  [{ text: attemptNumber, ...noBorder, fontSize: 20, bold: true, alignment: 'center' }, {}, {}, {} ,{}];\n\nconst noBorder = { border: [false, false, false, false] };\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\n\nimport CubingIcon from '../../../common/CubingIcon/CubingIcon';\nimport { downloadScorecards } from '../../../../logic/scorecards';\nimport { roundsMissingScorecards, parseActivityCode, activityCodeToName } from '../../../../logic/activities';\nimport { difference } from '../../../../logic/utils';\n\nexport default class Scorecards extends Component {\n  constructor(props) {\n    super(props);\n    const rounds = roundsMissingScorecards(this.props.wcif);\n    const selectedRounds = rounds.every(round => parseActivityCode(round.id).roundNumber === 1) ? rounds : []\n    this.state = {\n      selectedRounds\n    };\n  }\n\n  handleDownloadClick = () => {\n    downloadScorecards(this.props.wcif, this.state.selectedRounds);\n  };\n\n  handleRoundClick = round => event => {\n    const { selectedRounds } = this.state;\n    this.setState({\n      selectedRounds: selectedRounds.includes(round)\n        ? difference(selectedRounds, [round])\n        : [...selectedRounds, round]\n    });\n  };\n\n  render() {\n    const { selectedRounds } = this.state;\n    const { wcif } = this.props;\n    const rounds = roundsMissingScorecards(wcif);\n\n    return (\n      <Paper style={{ padding: 16 }}>\n        <List style={{ width: 400 }}>\n          {rounds.map(round => (\n            <ListItem key={round.id} button onClick={this.handleRoundClick(round)}>\n              <ListItemIcon>\n                <CubingIcon eventId={parseActivityCode(round.id).eventId} />\n              </ListItemIcon>\n              <ListItemText primary={activityCodeToName(round.id)} />\n              <Checkbox\n                checked={selectedRounds.includes(round)}\n                tabIndex={-1}\n                disableRipple\n                style={{ padding: 0 }}\n              />\n            </ListItem>\n          ))}\n        </List>\n        <Button onClick={this.handleDownloadClick} disabled={selectedRounds.length === 0}>\n          Download\n        </Button>\n      </Paper>\n    );\n  }\n}\n","import { chunk, sortBy, zip } from './utils';\nimport { sortWcifEvents, eventNameById } from './events';\nimport { activityById, hasDistributedAttempts, parseActivityCode } from './activities';\nimport { acceptedPeople } from './competitors';\nimport pdfMake from './pdfmake';\nimport { pdfName } from './pdf-utils';\n\nexport const downloadCompetitorCards = wcif => {\n  const start = performance.now();\n  const pdfDefinition = competitorCardsPdfDefinition(wcif);\n  console.log('Definition took', performance.now() - start);\n  const start2 = performance.now();\n  pdfMake.createPdf(pdfDefinition).download(`${wcif.id}-competitor-cards.pdf`);\n  console.log('PDF creation took', performance.now() - start2);\n};\n\nconst competitorCardsPdfDefinition = wcif => ({\n  pageMargins: [5, 5],\n  content: chunk(competitorCards(wcif), 3).map(cards => (\n    { columns: cards, fontSize: 8, unbreakable: true }\n  ))\n});\n\nconst competitorCards = wcif => {\n  const cards = sortBy(acceptedPeople(wcif), person => person.name)\n    .map(person => competitorCard(wcif, person));\n  const cardsInLastRow = cards.length % 3;\n  return cardsInLastRow === 0\n    ? cards\n    : cards.concat(Array.from({ length: 3 - cardsInLastRow }, () => ({})));\n};\n\nconst competitorCard = (wcif, person) => {\n  const tasks = (person.assignments || []).map(({ activityId, assignmentCode }) => {\n    const activity = activityById(wcif, activityId);\n    const { eventId, roundNumber, groupNumber } = parseActivityCode(activity.activityCode);\n    return { assignmentCode, eventId, groupNumber, roundNumber };\n  }).filter(({ eventId, roundNumber }) => !hasDistributedAttempts(eventId) && roundNumber === 1);\n  const groupsText = (eventId, assignmentCode) => ({\n    text: tasks\n      .filter(task => task.eventId === eventId && task.assignmentCode === assignmentCode)\n      .map(task => task.groupNumber)\n      .join(', '),\n    alignment: 'center'\n  });\n  const [assignmentCodes, headers] = zip(...[\n      ['competitor', 'Comp'], ['staff-scrambler', 'Scr'], ['staff-runner', 'Run'], ['staff-judge', 'Judge']\n    ].filter(([assignmentCode]) => tasks.some(task => task.assignmentCode === assignmentCode))\n  );\n  return {\n    margin: [5, 5],\n    stack: [\n      { text: pdfName(person.name), fontSize: 10 },\n      {\n        columns: [\n          `ID: ${person.registrantId}`,\n          { text: person.wcaId ? `WCA ID: ${person.wcaId}` : {}, alignment: 'right' }\n        ]\n      },\n      {\n        table: {\n          widths: ['auto', ...headers.map(() => '*')],\n          body: [\n            ['Event', ...headers.map(header => ({ text: header, alignment: 'center'}))],\n            ...sortWcifEvents(wcif.events).map(event => [\n              eventNameById(event.id),\n              ...assignmentCodes.map(assignmentCode => groupsText(event.id, assignmentCode))\n            ])\n          ]\n        },\n        layout: { paddingLeft: () => 2, paddingRight: () => 2, paddingTop: () => 1, paddingBottom: () => 1 }\n      }\n    ]\n  };\n};\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport { downloadCompetitorCards } from '../../../../logic/competitor-cards';\n\nexport default class CompetitorCards extends Component {\n  handleDownloadClick = () => {\n    downloadCompetitorCards(this.props.wcif);\n  };\n\n  render() {\n    return (\n      <Paper style={{ padding: 16 }}>\n        <Typography variant=\"body1\">\n          First round task assignments for every competitor.\n          Useful to be distributed along with name tags.\n        </Typography>\n        <Button onClick={this.handleDownloadClick}>\n          Download\n        </Button>\n      </Paper>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Tab from '@material-ui/core/Tab';\nimport Tabs from '@material-ui/core/Tabs';\n\nimport Scorecards from './Scorecards/Scorecards';\nimport CompetitorCards from './CompetitorCards/CompetitorCards';\n\nexport default class PrintingManager extends Component {\n  state = {\n    tabValue: 0\n  };\n\n  handleTabChange = (event, value) => {\n    this.setState({ tabValue: value });\n  };\n\n  render() {\n    const { tabValue } = this.state;\n    const { wcif } = this.props;\n\n    return (\n      <Grid container spacing={8} justify=\"flex-end\">\n        <Grid item xs={12}>\n          <AppBar position=\"static\" color=\"default\">\n            <Tabs value={tabValue} onChange={this.handleTabChange} centered>\n              <Tab label=\"Scorecards\" />\n              <Tab label=\"Competitor cards\" />\n            </Tabs>\n          </AppBar>\n        </Grid>\n        <Grid item xs={12}>\n          {tabValue === 0 && <Scorecards wcif={wcif} />}\n          {tabValue === 1 && <CompetitorCards wcif={wcif} />}\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" component={Link} to={`/competitions/${wcif.id}`}>\n            Done\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport SaveWcifButton from '../../common/SaveWcifButton/SaveWcifButton';\nimport { acceptedPeople } from '../../../logic/competitors';\nimport { difference } from '../../../logic/utils';\n\nconst roles = [\n  { id: 'staff-scrambler', name: 'Scrambler' },\n  { id: 'staff-judge', name: 'Judge' },\n  { id: 'staff-runner', name: 'Runner' },\n  { id: 'staff-dataentry', name: 'Data entry' },\n];\n\nexport default class RolesManager extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      localWcif: props.wcif,\n      page: 0,\n      searchString: ''\n    }\n  }\n\n  handleSearchChange = event => {\n    this.setState({ searchString: event.target.value });\n  };\n\n  handleChangePage = (event, page) => {\n    this.setState({ page });\n  };\n\n  handleRoleChange(roleId, personWcaUserId, event) {\n    const { localWcif } = this.state;\n    const { checked } = event.target;\n\n    this.setState({\n      localWcif: {\n        ...localWcif,\n        persons: localWcif.persons.map(person =>\n          person.wcaUserId === personWcaUserId\n            ? { ...person, roles: checked ? [...person.roles, roleId] : difference(person.roles, [roleId]) }\n            : person\n        )\n      }\n    });\n  }\n\n  clearRoles = () => {\n    const { localWcif } = this.state;\n    const roleIds = roles.map(role => role.id);\n    this.setState({\n      localWcif: {\n        ...localWcif,\n        persons: localWcif.persons.map(person =>\n          ({ ...person, roles: difference(person.roles, roleIds)})\n        )\n      }\n    });\n  };\n\n  render() {\n    const { page, searchString, localWcif } = this.state;\n    const { wcif, onWcifUpdate, history } = this.props;\n    const rowsPerPage = 5;\n    const rowsPerPageOptions = [5];\n\n    const people = acceptedPeople(localWcif)\n      .filter(person => person.name.match(new RegExp(searchString, 'i')));\n\n    return (\n      <Grid container spacing={8} justify=\"flex-end\">\n        <Grid item xs={12}>\n          <Paper>\n            <Toolbar>\n              <TextField label=\"Search\" value={searchString} onChange={this.handleSearchChange} />\n            </Toolbar>\n            <div style={{ overflowX: 'auto' }}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Person</TableCell>\n                    {roles.map(role =>\n                      <TableCell key={role.id} padding=\"none\" style={{ textAlign: 'center' }}>{role.name}</TableCell>\n                    )}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {people.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(person =>\n                    <TableRow key={person.wcaUserId} hover>\n                      <TableCell>{person.name}</TableCell>\n                      {roles.map(role =>\n                        <TableCell key={role.id} padding=\"checkbox\" style={{ textAlign: 'center' }}>\n                          <Checkbox\n                            checked={person.roles.includes(role.id)}\n                            onChange={this.handleRoleChange.bind(this, role.id, person.wcaUserId)}\n                          />\n                        </TableCell>\n                      )}\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n            <TablePagination\n              component=\"div\"\n              count={people.length}\n              rowsPerPage={rowsPerPage}\n              rowsPerPageOptions={rowsPerPageOptions}\n              page={page}\n              onChangePage={this.handleChangePage}\n            />\n          </Paper>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" component={Link} to={`/competitions/${localWcif.id}`}>\n            Cancel\n          </Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={this.clearRoles}>\n            Clear\n          </Button>\n        </Grid>\n        <Grid item>\n          <SaveWcifButton wcif={wcif} updatedWcif={localWcif} onWcifUpdate={onWcifUpdate} history={history} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\n\nimport CompetitionMenu from './CompetitionMenu/CompetitionMenu';\nimport ConfigManager from './ConfigManager/ConfigManager';\nimport GroupsManager from './GroupsManager/GroupsManager';\nimport PrintingManager from './PrintingManager/PrintingManager';\nimport RolesManager from './RolesManager/RolesManager';\n\nimport { getCompetitionWcif } from '../../logic/wca-api';\n\nexport default class Competition extends Component {\n  state = {\n    wcif: null,\n    loading: true\n  };\n\n  componentDidMount() {\n    getCompetitionWcif(this.props.match.params.competitionId)\n      .then(wcif => this.setState({ wcif, loading: false }))\n  }\n\n  handleWcifUpdate = wcif => {\n    this.setState({ wcif });\n  };\n\n  render() {\n    const { wcif, loading } = this.state;\n    const { match } = this.props;\n\n    return loading ? <LinearProgress /> : (\n      <div>\n        <Typography variant=\"h5\" style={{ marginBottom: 16 }}>\n          {wcif.name}\n        </Typography>\n        <Switch>\n          <Route exact path={match.url} render={\n            props => <CompetitionMenu {...props} wcif={wcif} baseUrl={match.url} />\n          } />\n          <Route path={`${match.url}/roles`} render={\n            props => <RolesManager {...props} wcif={wcif} onWcifUpdate={this.handleWcifUpdate} />\n          } />\n          <Route path={`${match.url}/config`} render={\n            props => <ConfigManager {...props} wcif={wcif} onWcifUpdate={this.handleWcifUpdate} />\n          } />\n          <Route path={`${match.url}/groups`} render={\n            props => <GroupsManager {...props} wcif={wcif} onWcifUpdate={this.handleWcifUpdate} />\n          } />\n          <Route path={`${match.url}/printing`} render={\n            props => <PrintingManager {...props} wcif={wcif} />\n          } />\n        </Switch>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\n\nimport { getUpcomingManageableCompetitions } from '../../logic/wca-api';\nimport { sortBy } from '../../logic/utils';\n\nexport default class CompetitionList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      competitions: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    getUpcomingManageableCompetitions()\n      .then(competitions => sortBy(competitions, competition => competition['start_date']))\n      .then(competitions => this.setState({ competitions, loading: false }));\n  }\n\n  render() {\n    const { competitions, loading } = this.state;\n\n    return (\n      <div>\n        <Paper>\n          <List subheader={<ListSubheader>Your competitions</ListSubheader>}>\n            {!loading && competitions.length === 0 &&\n              <ListItem>\n                <ListItemIcon>\n                  <Icon>sentiment_very_dissatisfied</Icon>\n                </ListItemIcon>\n                <ListItemText primary=\"You have no upcoming competitions to manage.\" />\n              </ListItem>\n            }\n            {competitions.map(competition =>\n              <ListItem key={competition.id} button component={Link} to={`/competitions/${competition.id}`}>\n                <ListItemText primary={competition.name} />\n              </ListItem>\n            )}\n          </List>\n          {loading && <LinearProgress />}\n        </Paper>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport './Footer.css';\n\nconst Footer = () => (\n  <Grid container className=\"footer\">\n    <Grid item style={{ flexGrow: 1 }}>\n      <Typography>\n        Made with <Icon className=\"footer-icon\">favorite</Icon>\n        {' '}by <a href=\"https://github.com/jonatanklosko\" target=\"_blank\" rel=\"noopener noreferrer\">Jonatan Kłosko</a>\n      </Typography>\n    </Grid>\n    <Grid item>\n      <Typography>\n        <a href=\"https://github.com/jonatanklosko/groupifier\" target=\"_blank\" rel=\"noopener noreferrer\">\n          GitHub\n        </a>\n      </Typography>\n    </Grid>\n    <Grid item style={{ marginLeft: 8 }}>\n      <Typography>\n        <a href=\"mailto:jonatanklosko@gmail.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Contact\n        </a>\n      </Typography>\n    </Grid>\n  </Grid>\n);\n\nexport default Footer;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'react-router-dom';\n\nconst Header = ({ isSignedIn, onSignIn, onSignOut }) => (\n  <AppBar position=\"static\" color=\"primary\">\n    <Toolbar>\n      <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\n        <Link to={isSignedIn ? '/competitions' : '/'}>\n          <Icon style={{ fontSize: '1.5em', verticalAlign: 'middle', marginRight: 10 }}>people</Icon>\n          Groupifier\n        </Link>\n      </Typography>\n      {isSignedIn\n        ? <Button color=\"inherit\" onClick={onSignOut}>Sign out</Button>\n        : <Button color=\"inherit\" onClick={onSignIn}>Sign in</Button>}\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Header;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nconst features = [\n  'Automatically calculates a suitable group size.',\n  'Assigns tasks to people (scrambling, judging). Allows to select scramblers manually from a list.',\n  'Sorts competitors by their official results, so that each subsequent group represents a better level. When told otherwise, minimizes the amount of people with the same name in each group.',\n  'Handles events being held simultaneous by creating separate groups for people taking part in both main and side event.',\n  'Generates PDFs containing scorecards, personal cards with task assignment and a summary for each round.',\n  'Fetches cutoffs and time limits from the WCA website and puts them on scorecards.',\n  'Optionally sets the number of scramble groups for each round based on advancement conditions and saves that to the WCA website, so there is no need for entering them manually.'\n];\n\nconst Home = () => (\n  <Grid container spacing={24} direction=\"column\">\n    <Grid item>\n      <Typography variant=\"h4\">What is Groupifier?</Typography>\n    </Grid>\n    <Grid item>\n      <Typography variant=\"subtitle1\">\n        It is a tool meant for WCA competition organizers.\n        Its main objective is to simplify the process of splitting competitors into groups\n        and provide the best result with minimal configuration.\n      </Typography>\n    </Grid>\n    <Grid item>\n      <Typography variant=\"h4\">What does it do?</Typography>\n    </Grid>\n    <Grid item>\n      <List>\n        {features.map(feature =>\n          <ListItem key={feature}>\n            <ListItemIcon>\n              <Icon>check</Icon>\n            </ListItemIcon>\n            <ListItemText primary={feature} />\n          </ListItem>\n        )}\n      </List>\n    </Grid>\n  </Grid>\n);\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\n\nimport Competition from '../Competition/Competition';\nimport CompetitionList from '../CompetitionList/CompetitionList';\nimport Footer from '../Footer/Footer';\nimport Header from '../Header/Header';\nimport Home from '../Home/Home';\n\nimport { isSignedIn, signIn, signOut } from '../../logic/auth';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSignedIn: isSignedIn()\n    };\n  }\n\n  handleSignIn = () => {\n    signIn();\n  };\n\n  handleSignOut = () => {\n    signOut();\n    this.setState({ isSignedIn: false })\n  };\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <CssBaseline />\n          <Header\n            isSignedIn={this.state.isSignedIn}\n            onSignIn={this.handleSignIn}\n            onSignOut={this.handleSignOut}\n          />\n          <Grid container justify=\"center\">\n            <Grid item xs={12} md={8} style={{ padding: 16 }}>\n              {this.state.isSignedIn\n                ? <Switch>\n                    <Route path=\"/competitions/:competitionId\" component={Competition} />\n                    <Route path=\"/competitions\" component={CompetitionList} />\n                    <Redirect to=\"/competitions\" />\n                  </Switch>\n                : <Switch>\n                    <Route exact path=\"/\" component={Home} />\n                    <Redirect to=\"/\" />\n                  </Switch>\n              }\n            </Grid>\n          </Grid>\n          <Route exact path=\"/\" component={Footer} />\n        </div>\n      </Router>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { initializeAuth } from './logic/auth';\n\ninitializeAuth();\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}